class Profile(Struct):
  svc_id = Default(String, 'peloton')
  app_id = Default(String, 'mysql')
  environment = Default(String, 'devel')
  cluster = Required(String)
  instances = Default(Integer, 1)
  pinned_attribute = Default(String, "hostname")
  pinned_hosts = Required(String)
  # This docker image is not compatible with aurora in AA until T745768 is resolved
  docker_image = Default(String, 'mysql/mysql-server:5.7.15')
  mysql_root_password = Default(String, 'peloton-root')
  mysql_database = Default(String, 'peloton')
  mysql_user = Default(String, 'peloton')
  mysql_password = Default(String, 'peloton')
  mysql_host_volume = Default(String, '/var/lib/peloton/mysql')
  cpus = Default(Float, 16.0)

#
# Cluster specific profiles here
#

# PROFILES = [
#   Profile(
#     cluster = 'CLUSTER_NAME',
#     pinned_hosts = 'PINNED_MYSQL_HOST',
#   )
# ]

docker_entrypoint = Process(
   name='{{profile.app_id}}',
   cmdline='/entrypoint.sh mysqld'
)

executor_task = SequentialTask(
  name='{{profile.app_id}}',
  processes=[
    docker_entrypoint
  ],
  resources = Resources(cpu = '{{profile.cpus}}', ram = 32*GB, disk = 64*GB)
)

JOB_TEMPLATE = Service(
  cluster='{{profile.cluster}}',
  environment='{{profile.environment}}',
  role='{{profile.svc_id}}',
  name='{{profile.svc_id}}.{{profile.app_id}}',
  task=executor_task,
  instances='{{profile.instances}}',
  # TODO: make instances more than one after distributed lock.
  container=Container(
    docker = Docker(
      image = '{{profile.docker_image}}',
      parameters=[
        Parameter(name='env', value='MYSQL_ROOT_PASSWORD={{profile.mysql_root_password}}'),
        Parameter(name='env', value='MYSQL_DATABASE={{profile.mysql_database}}'),
        Parameter(name='env', value='MYSQL_USER={{profile.mysql_user}}'),
        Parameter(name='env', value='MYSQL_PASSWORD={{profile.mysql_password}}'),
        Parameter(name='volume', value='{{profile.mysql_host_volume}}:/var/lib/mysql'),
      ]
    )
  ),
  constraints = {
    '{{profile.pinned_attribute}}': '{{profile.pinned_hosts}}'
  }
)

#
# Cluster specific jobs here
#

# jobs = [
#   JOB_TEMPLATE.bind(profile = p) for p in PROFILES
# ]
