class Profile(Struct):
  svc_id = Default(String, 'peloton')
  app_id = Required(String)
  environment = Default(String, 'devel')  # TODO: make this production once we have quota.
  cluster = Required(String)
  instances = Required(Integer)
  docker_image = Required(String)
  mesos_zk_path = Required(String)
  election_zk_servers = Required(String)
  mysql_host = Required(String)
  enable_debug_logging = Default(Boolean, 'true')
  use_stapi = Default(Boolean, 'false')
  cassandra_hosts = Default(String, '')
  pinned_attribute = Default(String, "host")
  pinned_hosts = Required(String)

#
# Cluster specific profiles here
#

docker_entrypoint = Process(
   name='{{profile.app_id}}',
   cmdline='/bin/entrypoint.sh'
)

executor_task = SequentialTask(
  name='{{profile.app_id}}',
  processes=[
    docker_entrypoint
  ],
  resources = Resources(cpu = 4.0, ram = 8*GB, disk = 16*GB)
)

JOB_TEMPLATE = Service(
  cluster='{{profile.cluster}}',
  environment='{{profile.environment}}',
  role='{{profile.svc_id}}',
  name='{{profile.svc_id}}.{{profile.app_id}}',
  task=executor_task,
  instances='{{profile.instances}}',
  # TODO: make instances more than one after distributed lock.
  container=Container(
    docker = Docker(
      image = '{{profile.docker_image}}',
      parameters=[
        Parameter(name='env', value='ENVIRONMENT=production'),
        Parameter(name='env', value='CONFIG_DIR=./config'),
        Parameter(name='env', value='APP={{profile.app_id}}'),
        Parameter(name='env', value='MESOS_ZK_PATH={{profile.mesos_zk_path}}'),
        Parameter(name='env', value='DB_HOST={{profile.mysql_host}}'),
        Parameter(name='env', value='ENABLE_DEBUG_LOGGING={{profile.enable_debug_logging}}'),
        Parameter(name='env', value='ELECTION_ZK_SERVERS={{profile.election_zk_servers}}'),
        Parameter(name='env', value='USE_STAPI={{profile.use_stapi}}'),
        Parameter(name='env', value='CASSANDRA_HOSTS={{profile.cassandra_hosts}}'),
      ]
    )
  ),
  constraints = {
     '{{profile.pinned_attribute}}': '{{profile.pinned_hosts}}'
  }
)

#
# Cluster specific jobs here
#

# jobs = [
#   JOB_TEMPLATE.bind(profile = p) for p in PROFILES
# ]
