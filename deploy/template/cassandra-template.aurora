class Profile(Struct):
  svc_id = Default(String, 'peloton')
  app_id = Default(String, 'cassandra')
  environment = Default(String, 'devel')
  cluster = Required(String)
  instances = Default(Integer, 1)
  pinned_attribute = Default(String, "host")
  pinned_hosts = Required(String)
  docker_image = Default(String, 'cassandra:3.9')
  # Initial setup is required, check out https://code.uberinternal.com/w/runbooks/peloton/operations/#cassandra
  entrypoint = Default(String, '/files/run_cassandra_with_stratio_index.sh')
  host_volume = Default(String, '/var/lib/peloton/cassandra')
  cpus = Default(Float, 16.0)


docker_entrypoint = Process(
   name='{{profile.app_id}}',
   cmdline='{{profile.entrypoint}}'
)

executor_task = SequentialTask(
  name='{{profile.app_id}}',
  processes=[
    docker_entrypoint
  ],
  resources = Resources(cpu = '{{profile.cpus}}', ram = 32*GB, disk = 64*GB)
)

JOB_TEMPLATE = Service(
  cluster='{{profile.cluster}}',
  environment='{{profile.environment}}',
  role='{{profile.svc_id}}',
  name='{{profile.svc_id}}.{{profile.app_id}}',
  task=executor_task,
  instances='{{profile.instances}}',
  container=Container(
    docker = Docker(
      image = '{{profile.docker_image}}',
      parameters=[
        Parameter(name='volume', value='{{profile.host_volume}}:/files'),
      ]
    )
  ),
  constraints = {
    '{{profile.pinned_attribute}}': '{{profile.pinned_hosts}}'
  }
)
