/**
 *  Internal API for Peloton Resource Manager
 */

syntax = "proto3";

package peloton.private.resmgr;

option go_package = "peloton/private/resmgr";

import "mesos/v1/mesos.proto";
import "peloton/api/peloton.proto";
import "peloton/api/task/task.proto";


/**
 *  TaskType task type definition such as batch, service and infra agent.
 */
enum TaskType {

  // This is unknown type
  UNKNOWN = 0;

  // Normal batch task
  BATCH = 1;

  // STATELESS task which is long running and will be restarted upon failures.
  STATELESS = 2;

  // STATEFUL task which is using persistent volume and is long running
  STATEFUL = 3;

  // Daemon task which has one instance running on each host for infra
  // agents like muttley, m3collector etc.
  DAEMON = 4;
}

/**
 *  Task describes a task instance at Resource Manager layer. Only
 *  includes the minimal set of fields required for Resource Manager
 *  and Placement Engine, such as resource config, constraint etc.
 */
message Task {
  // Name of the task
  string name = 1;

  // The unique ID of the task
  api.peloton.TaskID id = 2;

  // The Job ID of the task for use cases like gang scheduling
  api.peloton.JobID jobId = 3;

  // The mesos task ID of the task
  mesos.v1.TaskID taskId = 4;

  // Resource config of the task
  api.task.ResourceConfig resource = 5;

  //
  // Priority of a task. Higher value takes priority over lower value
  // when making scheduling decisions as well as preemption decisions
  //
  uint32 priority = 6;

  //
  // Whether the task is preemptible. If a task is not preemptible, then
  // it will have to be launched using reserved resources.
  //
  bool preemptible = 7;

  // List of user-defined labels for the task, these are used to enforce
  // the constraint. These are copied from the TaskConfig.
  mesos.v1.Labels labels = 8;

  // Constraint on the labels of the host or tasks on the host that this
  // task should run on. This is copied from the TaskConfig.
  api.task.Constraint constraint = 9;

  // Type of the Task
  TaskType type = 10;
}

/**
 *  Placement describes the mapping of a list of tasks to a host
 *  so that Job Manager can launch the tasks on the host.
 */
message Placement {
  // The list of tasks to be placed
  repeated api.peloton.TaskID tasks = 1;

  // The name of the host where the tasks are placed
  string hostname = 2;

  // The Mesos agent ID of the host where the tasks are placed
  mesos.v1.AgentID agentId = 3;

  // The list of Mesos offers of the placed tasks
  repeated mesos.v1.OfferID offerIds = 4;
}
