/**
 *  Upgrade Workflow API
 */

syntax = "proto3";

package peloton.upgrade;

option go_package = "upgrade";

import "peloton/job/job.proto";


/**
 *  A unique ID assigned to a workflow.
 */
message WorkflowID {
  string value = 1;
}


/**
 *  Upgrade options for a job rolling upgrade
 */
message UpgradeOptions {
  // Upgrade batch size of the deployment
  int32 batchSize = 1;

  // Upgrade batch percentage of the deployment. If present,
  // will take precedence over batchSize
  double batchPercentage = 2;

  // Whether or not to stop all instance before upgrade
  bool stopBeforeUpgrade = 3;
}


/**
 *  Configuration spec of an upgrade workflow
 */
message UpgradeSpec {
  // Entity id of the job to be upgraded
  job.JobID jobId = 1;

  // New configuration of the job to be upgraded. The new job config
  // will be applied to all instances in a rolling upgrade fashion without
  // voilating the job SLA
  job.JobConfig jobConfig = 2;

  // The options of the rolling upgrade
  UpgradeOptions options = 3;
}

/**
 *  Runtime info of an upgrade workflow
 */
message UpgradeInfo {
  // Runtime state of a job upgrade workflow
  enum WorkflowState {
    // The upgrade workflow is rolling forward
    ROLLING_FORWARD = 0;

    // The upgrade workflow is rolling back
    ROLLING_BACK    = 1;

    // The upgrade workflow is paused
    PAUSED          = 2;

    // The upgrade workflow completed successfully
    SUCCEEDED       = 3;

    // The upgrade workflow is rolled back
    ROLLED_BACK     = 4;

    // The upgrade workflow is aborted
    ABORTED         = 5;
  } 

  // Workflow ID of the job upgrade
  WorkflowID workflowId = 1;

  // Number of tasks that have been upgraded
  int32 numTasksDone = 2;

  // Number of tasks to be upgraded
  int32 numTasksRemaining = 3;

  // Runtime state of the upgrade workflow
  WorkflowState state = 4;
}


/**
 *  Upgrade Manager interface
 */
service UpgradeManager
{
  // Create a new rolling upgrade workflow for a job
  rpc create(CreateRequest) returns (CreateResponse);

  // Get the upgrade workflow of a job
  rpc get(GetRequest) returns (GetResponse);

  // List all upgrade workflows that are currently running
  rpc list(ListRequest) returns (ListResponse);

  // Pause a running upgrade workflow
  rpc pause(PauseRequest) returns (PauseResponse);

  // Resume a paused upgrade workflow
  rpc resume(ResumeRequest) returns (ResumeResponse);
  
  // Rollback an upgrade workflow
  rpc rollback(RollbackRequest) returns (RollbackResponse);

  // Abort an upgrade workflow
  rpc abort(AbortRequest) returns (AbortResponse);
  
}

/**
 *  Raised when an operation is performed on an upgrade workflow
 *  with invalid state
 */
message InvalidWorkflowState
{
  // Entity ID of the workflow
  WorkflowID workflowId = 1;

  // Invalid state of the workflow
  UpgradeInfo.WorkflowState invalidState = 2;
}


message WorkflowAlreadyExists {
  WorkflowID id = 1;
  string message = 2;
}

message WorkflowNotFound {
  WorkflowID id = 1;
  string message = 2;
}

message CreateRequest {
  UpgradeSpec spec = 1;
}

message CreateResponse {
  oneof response {
    WorkflowID result = 1;
    job.JobNotFound notFound = 2;
    WorkflowAlreadyExists alreadyExists = 3;
  }
}

message GetRequest {
  WorkflowID workflowId = 1;
}

message GetResponse {
  oneof response {
    UpgradeInfo result = 1;
    WorkflowNotFound notFound = 2;
  }
}

message ListRequest {
  int32 limit = 1;
}

message ListResponse {
  message Result {
    repeated UpgradeInfo value = 1;
  }  
  oneof response {
    Result result = 1;
  }
}

message PauseRequest {
  WorkflowID workflowId = 1;
}

message PauseResponse {
  oneof response {
    WorkflowNotFound notFound = 1;
    InvalidWorkflowState invalidState = 2;
  }
}

message ResumeRequest {
  WorkflowID workflowId = 1;
}

message ResumeResponse {
  oneof response {
    WorkflowNotFound notFound = 1;
    InvalidWorkflowState invalidState = 2;
  }
}

message RollbackRequest {
  WorkflowID workflowId = 1;
}

message RollbackResponse {
  oneof response {
    WorkflowNotFound notFound = 1;
    InvalidWorkflowState invalidState = 2;
  }
}

message AbortRequest {
  WorkflowID workflowId = 1;
  bool softAbort = 2;
}

message AbortResponse {
  oneof response {
    WorkflowNotFound notFound = 1;
    InvalidWorkflowState invalidState = 2;
  }
}
