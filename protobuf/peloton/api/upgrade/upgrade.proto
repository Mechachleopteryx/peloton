/**
 *  Upgrade Workflow API
 */

syntax = "proto3";

package peloton.api.upgrade;

option go_package = "peloton/api/upgrade";
option java_package = "peloton.api.upgrade";

import "peloton/api/peloton.proto";


/**
 *  Upgrade options for a job rolling upgrade
 */
message Options {
  // startPaused indicates if the workflow should start in the paused state,
  // requiring an explicit resume to initiate.
  bool startPaused = 1;
}


/**
 *  Runtime state of a job upgrade workflow.
 */
enum State {
  UNKNOWN         = 0;

  // The upgrade workflow is rolling forward.
  ROLLING_FORWARD = 1;

  // The upgrade workflow is rolling back.
  ROLLING_BACK    = 2;

  // The upgrade workflow is paused.
  PAUSED          = 3;

  // The upgrade workflow completed successfully.
  SUCCEEDED       = 4;

  // The upgrade workflow is rolled back.
  ROLLED_BACK     = 5;

  // The upgrade workflow is aborted by the user.
  ABORTED         = 6;
}


/**
 *  Status of an upgrade workflow.
 */
message Status {
  // Workflow ID of the job upgrade.
  peloton.UpgradeID id = 1;

  // Workflow ID of the job upgrade.
  peloton.JobID jobId = 2;

  // Runtime state of the upgrade workflow.
  State state = 3;

  // Number of tasks that have been upgraded.
  uint32 numTasksDone = 4;
}
