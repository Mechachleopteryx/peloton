/**
 *  Update API
 */

syntax = "proto3";

package peloton.api.update;

option go_package = "peloton/api/update";
option java_package = "peloton.api.update";

import "peloton/api/peloton.proto";

/**
 *  A unique ID assigned to a update.
 */
message UpdateID {
  string value = 1;
}


/**
 *  Update options for a job update
 */
message UpdateConfig {
  // Update batch size of the deployment
  int32 batchSize = 1;

  // Update batch percentage of the deployment. If present,
  // will take precedence over batchSize
  double batchPercentage = 2;

  // Whether or not to stop all instance before update
  bool stopBeforeUpdate = 3;

  // startPaused indicates if the update should start in the paused state,
  // requiring an explicit resume to initiate.
  bool startPaused = 4;
}

// Runtime state of a job update
enum State {
  // The update is rolling forward
  ROLLING_FORWARD = 0;

  // The update is rolling back
  ROLLING_BACK    = 1;

  // The update is paused
  PAUSED          = 2;

  // The update completed successfully
  SUCCEEDED       = 3;

  // The update is rolled back
  ROLLED_BACK     = 4;

  // The update is aborted
  ABORTED         = 5;
}

/**
 *  UpdateStatus provides current runtime status of an update
 */
message UpdateStatus {
  // Number of tasks that have been updated
  int32 numTasksDone = 1;

  // Number of tasks to be updated
  int32 numTasksRemaining = 2;

  // Runtime state of the update
  State state = 3;
}

/**
 * Information of an update, such as update config and runtime status
 */
message UpdateInfo {
  // Update ID of the job update
  UpdateID updateId = 1;

  // Update configuration
  UpdateConfig config = 2;

  // Update runtime status
  UpdateStatus status = 3;

  // Job ID of the job update
  peloton.JobID jobId = 4;
}
