/**
 *  This file defines the Job Service in Peloton API
 */

syntax = "proto3";

package peloton.api.job.svc;

option go_package = "peloton/api/job/svc";
option java_package = "peloton.api.job.svc";

import "peloton/api/peloton.proto";
import "peloton/api/query/query.proto";
import "peloton/api/job/job.proto";
import "peloton/api/respool/respool.proto";


/**
 *  Job service defines the job related methods such as create, get,
 *  query and kill jobs.
 */
service JobService {

  // Create a job entity for a given config.
  rpc CreateJob(CreateJobRequest) returns (CreateJobResponse);

  // Get the config of a job entity.
  rpc GetJob(GetJobRequest) returns (GetJobResponse);

  // Query the jobs that match a list of labels.
  rpc QueryJobs(QueryJobsRequest) returns (QueryJobsResponse);

  // Delete a job and stop all related tasks.
  rpc DeleteJob(DeleteJobRequest) returns (DeleteJobResponse);

  // Update a job entity with a new config. This is a temporary API
  // for updating batch jobs. It only supports adding new instances to an
  // existing job. It will be deprecated when the UpgradeService API
  // is implemented.
  rpc UpdateJob(UpdateJobRequest) returns (UpdateJobResponse);
}


/**
 *  Request message for JobService.CreateJob method.
 */
message CreateJobRequest {
  // The unique job UUID specified by the client. This can be used by
  // the client to re-create a failed job without the side-effect of
  // creating duplicated jobs. If unset, the server will create a new
  // UUID for the job for each invocation.
  peloton.JobID id = 1;

  // The resource pool under which the job should be created. The
  // scheduling of all tasks in the job will be subject to the resource
  // availablity of the resource pool.
  respool.ResourcePoolPath pool = 2;

  // The detailed configuration of the job to be created.
  JobConfig config = 3;
}


/**
 *  Response message for JobService.CreateJob method.
 *
 *  Return errors:
 *    ALREADY_EXISTS:    if the job ID already exists.o
 *    INVALID_ARGUMENT:  if the job ID or job config is invalid.
 *    NOT_FOUND:         if the resource pool is not found.
 */
message CreateJobResponse {
  // The job ID of the newly created job. Will be the same as the
  // one in CreateJobRequest if provided. Otherwise, a new job ID
  //  will be generated by the server.
  peloton.JobID jobId = 1;
}


/**
 *  Request message for JobService.GetJob method.
 */
message GetJobRequest {
  // The job ID to look up the job.
  peloton.JobID id = 1;
}


/**
 *  Response message for JobService.GetJob method.
 *
 *  Return errors:
 *    NOT_FOUND:  if the job is not found in Peloton.
 */
message GetJobResponse {
  // The job configuration of the matching job.
  JobConfig result = 1;
}


/**
 *  Request message for JobService.QueryJobs method.
 */
message QueryJobsRequest {
  // The spec of query criteria for the jobs.
  job.QuerySpec spec = 1;

  // The spec of how to do pagination for the query results.
  query.PaginationSpec pagination = 2;
}


/**
 *  Response message for JobService.QueryJobs method.
 *
 *  Return errors:
 *    INVALID_ARGUMENT:  if the resource pool path or job states are invalid.
 */
message QueryJobsResponse {
  // List of jobs that match the job query criteria.
  repeated JobInfo records = 1;

  // Pagination result of the job query.
  query.Pagination pagination = 2;
}


/**
 *  Request message for JobService.DeleteJob method.
 */
message DeleteJobRequest {
  // The job ID to be deleted.
  peloton.JobID id = 1;
}


/**
 *  Response message for JobService.DeleteJob method.
 *
 *  Return errors:
 *    NOT_FOUND:  if the job is not found in Peloton.
 */
message DeleteJobResponse {
}


/**
 *  Request message for JobService.UpdateJob method.
 */
message UpdateJobRequest {
  // The job ID to be updated.
  peloton.JobID id = 1;
  // The new job config to be applied to the job.
  JobConfig config = 2;
}


/**
 *  Response message for JobService.UpdateJob method.
 *
 *  Return errors:
 *    INVALID_ARGUMENT:  if the job ID or job config is invalid.
 *    NOT_FOUND:         if the job ID is not found.
 */
message UpdateJobResponse {
}
