/**
 *  Resource Pool Manager API
 */


syntax = "proto3";

package peloton.api.respool;

option go_package = "peloton/api/respool";

import "peloton/api/changelog/changelog.proto";

/**
 *  A unique ID assigned to a Resource Pool.
 */
message ResourcePoolID {
  string value = 1;
}

/**
 *   A fully qualified path to a resource pool in a resource pool hierrarchy.
 *   The path to a resource pool can be defined as an absolute path,
 *   starting from the root node and separated by a slash.
 *
 *   The resource hierarchy is anchored at a node called the root,
 *   designated by a slash "/".
 *
 *   For thhe below resource hierarchy ; the "compute" resource pool would be
 *   desgignated by path: /infrastructure/compute
 *               root
 *                ├─ infrastructure
 *                │  └─ compute
 *                └─ marketplace
 */
message ResourcePoolPath {
  string value = 1;
}

/**
 *  Resource configuration for a resource
 */
message ResourceConfig {

  // Type of the resource
  string kind = 1;

  // Reservation/min of the resource
  double reservation = 2;

  // Limit of the resource
  double limit = 3;

  // Share on the resource pool
  double share = 4;

}

/**
  * Scheduling policy for Resource Pool.
  */
enum SchedulingPolicy {
  // TODO: We need to investigate why yarpc is ommiting value 0
  UNKNOWN = 0;

  // This scheduling policy will return item for highest priority in FIFO order
  PriorityFIFO = 1;
}

/**
 *  Resource Pool configuration
 */
message ResourcePoolConfig {

  // Change log entry of the Resource Pool config
  changelog.ChangeLog changeLog = 1;

  // Name of the resource pool
  string name = 2;

  // Owning team of the pool
  string owningTeam = 3;

  // LDAP groups of the pool
  repeated string ldapGroups = 4;

  // Description of the resource pool
  string description = 5;

  // Resource config of the Resource Pool
  repeated ResourceConfig resources = 6;

  // Resource Pool's parent
  ResourcePoolID parent = 7;

  // Task Scheduling policy
  SchedulingPolicy policy = 8;
}

message ResourcePoolInfo {
  // Resource Pool Id
  ResourcePoolID id = 1;

  // ResourcePool config
  ResourcePoolConfig config = 2;

  // Resource Pool's parent
  //TODO: parent duplicated from ResourcePoolConfig
  ResourcePoolID parent = 3;

  // Resource Pool's children
  repeated ResourcePoolID children = 4;

  // Resource usage for each resource kind
  repeated ResourceUsage usage = 5;
}

/**
 *  Resource Manager service interface
 */
service ResourceManager
{
  // Create a resource pool entity for a given config
  rpc CreateResourcePool(CreateRequest) returns (CreateResponse);

  // Get the resource pool entity
  rpc GetResourcePool(GetRequest) returns (GetResponse);

  // Delete a resource pool entity
  rpc DeleteResourcePool(DeleteRequest) returns (DeleteResponse);

  // modify a resource pool entity
  rpc UpdateResourcePool(UpdateRequest) returns (UpdateResponse);

  // Lookup the resource pool ID for a given resource pool path
  rpc LookupResourcePoolID(LookupRequest) returns (LookupResponse);

  // Query the resource pool.
  rpc Query(QueryRequest) returns (QueryResponse);
}

message ResourcePoolAlreadyExists {
  ResourcePoolID id = 1;
  string message = 2;
}

message InvalidResourcePoolConfig {
  ResourcePoolID id = 1;
  string message = 2;
}

message ResourcePoolNotFound {
  ResourcePoolID id = 1;
  string message = 2;
}

message ResourcePoolPathNotFound {
  ResourcePoolPath path = 1;
  string message = 2;
}

message InvalidResourcePoolPath {
  ResourcePoolPath path = 1;
  string message = 2;
}

message CreateRequest {
  ResourcePoolConfig config = 2;
}

message CreateResponse {
  message Error {
    ResourcePoolAlreadyExists alreadyExists = 1;
    InvalidResourcePoolConfig invalidResourcePoolConfig = 2;
  }

  Error error = 1;
  ResourcePoolID result = 2;

}

message GetRequest {
  // The ID of the resource pool to get
  ResourcePoolID id = 1;

  // Whether or not to include the resource pool info of the direct
  // children
  bool includeChildPools = 2;
}

message GetResponse {
  message Error {
    ResourcePoolNotFound notFound = 1;
  }

  Error error = 1;
  ResourcePoolInfo poolinfo = 2;
  repeated ResourcePoolInfo childPools = 3;
}

message DeleteRequest {
  ResourcePoolID id = 1;
}

message DeleteResponse {
  message Error {
    ResourcePoolNotFound notFound = 1;
  }

  Error error = 1;
}

message UpdateRequest {
  ResourcePoolID id = 1;
  ResourcePoolConfig config = 2;
}

message UpdateResponse {
  message Error {
    ResourcePoolNotFound notFound = 1;
    InvalidResourcePoolConfig invalidResourcePoolConfig = 2;
  }

  Error error = 1;
}

message LookupRequest {
  ResourcePoolPath path = 1;
}

message LookupResponse {
  message Error {
    ResourcePoolPathNotFound notFound = 1;
    InvalidResourcePoolPath invalidPath = 2;
  }

  Error error = 1;
  ResourcePoolID id = 2;
}

message QueryRequest {
  // TODO Filters
}

message QueryResponse {
  message Error {
    // TODO add error types
  }
  Error error = 1;
  repeated ResourcePoolInfo resourcePools = 2;
}

message ResourceUsage {
  // Type of the resource
  string kind = 1;
  // Allocation of the resource
  double allocation = 2;
  // slack is the resource which is allocated
  // but not used and mesos will give those resources as
  // revocable offers
  double slack = 3;
}