// Automatically generated by MockGen. DO NOT EDIT!
// Source: code.uber.internal/infra/peloton/storage (interfaces: JobStore,TaskStore,FrameworkInfoStore,ResourcePoolStore)

package mock_storage

import (
	gomock "github.com/golang/mock/gomock"
	v1 "mesos/v1"
	job "peloton/api/job"
	respool "peloton/api/respool"
	task "peloton/api/task"
)

// Mock of JobStore interface
type MockJobStore struct {
	ctrl     *gomock.Controller
	recorder *_MockJobStoreRecorder
}

// Recorder for MockJobStore (not exported)
type _MockJobStoreRecorder struct {
	mock *MockJobStore
}

func NewMockJobStore(ctrl *gomock.Controller) *MockJobStore {
	mock := &MockJobStore{ctrl: ctrl}
	mock.recorder = &_MockJobStoreRecorder{mock}
	return mock
}

func (_m *MockJobStore) EXPECT() *_MockJobStoreRecorder {
	return _m.recorder
}

func (_m *MockJobStore) CreateJob(_param0 *job.JobID, _param1 *job.JobConfig, _param2 string) error {
	ret := _m.ctrl.Call(_m, "CreateJob", _param0, _param1, _param2)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockJobStoreRecorder) CreateJob(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CreateJob", arg0, arg1, arg2)
}

func (_m *MockJobStore) DeleteJob(_param0 *job.JobID) error {
	ret := _m.ctrl.Call(_m, "DeleteJob", _param0)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockJobStoreRecorder) DeleteJob(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DeleteJob", arg0)
}

func (_m *MockJobStore) GetAllJobs() (map[string]*job.JobConfig, error) {
	ret := _m.ctrl.Call(_m, "GetAllJobs")
	ret0, _ := ret[0].(map[string]*job.JobConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockJobStoreRecorder) GetAllJobs() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetAllJobs")
}

func (_m *MockJobStore) GetJob(_param0 *job.JobID) (*job.JobConfig, error) {
	ret := _m.ctrl.Call(_m, "GetJob", _param0)
	ret0, _ := ret[0].(*job.JobConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockJobStoreRecorder) GetJob(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetJob", arg0)
}

func (_m *MockJobStore) GetJobsByOwner(_param0 string) (map[string]*job.JobConfig, error) {
	ret := _m.ctrl.Call(_m, "GetJobsByOwner", _param0)
	ret0, _ := ret[0].(map[string]*job.JobConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockJobStoreRecorder) GetJobsByOwner(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetJobsByOwner", arg0)
}

func (_m *MockJobStore) Query(_param0 *v1.Labels) (map[string]*job.JobConfig, error) {
	ret := _m.ctrl.Call(_m, "Query", _param0)
	ret0, _ := ret[0].(map[string]*job.JobConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockJobStoreRecorder) Query(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Query", arg0)
}

// Mock of TaskStore interface
type MockTaskStore struct {
	ctrl     *gomock.Controller
	recorder *_MockTaskStoreRecorder
}

// Recorder for MockTaskStore (not exported)
type _MockTaskStoreRecorder struct {
	mock *MockTaskStore
}

func NewMockTaskStore(ctrl *gomock.Controller) *MockTaskStore {
	mock := &MockTaskStore{ctrl: ctrl}
	mock.recorder = &_MockTaskStoreRecorder{mock}
	return mock
}

func (_m *MockTaskStore) EXPECT() *_MockTaskStoreRecorder {
	return _m.recorder
}

func (_m *MockTaskStore) CreateTask(_param0 *job.JobID, _param1 uint32, _param2 *task.TaskInfo, _param3 string) error {
	ret := _m.ctrl.Call(_m, "CreateTask", _param0, _param1, _param2, _param3)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockTaskStoreRecorder) CreateTask(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CreateTask", arg0, arg1, arg2, arg3)
}

func (_m *MockTaskStore) CreateTasks(_param0 *job.JobID, _param1 []*task.TaskInfo, _param2 string) error {
	ret := _m.ctrl.Call(_m, "CreateTasks", _param0, _param1, _param2)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockTaskStoreRecorder) CreateTasks(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CreateTasks", arg0, arg1, arg2)
}

func (_m *MockTaskStore) GetTaskByID(_param0 string) (*task.TaskInfo, error) {
	ret := _m.ctrl.Call(_m, "GetTaskByID", _param0)
	ret0, _ := ret[0].(*task.TaskInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockTaskStoreRecorder) GetTaskByID(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetTaskByID", arg0)
}

func (_m *MockTaskStore) GetTaskForJob(_param0 *job.JobID, _param1 uint32) (map[uint32]*task.TaskInfo, error) {
	ret := _m.ctrl.Call(_m, "GetTaskForJob", _param0, _param1)
	ret0, _ := ret[0].(map[uint32]*task.TaskInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockTaskStoreRecorder) GetTaskForJob(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetTaskForJob", arg0, arg1)
}

func (_m *MockTaskStore) GetTasksForJob(_param0 *job.JobID) (map[uint32]*task.TaskInfo, error) {
	ret := _m.ctrl.Call(_m, "GetTasksForJob", _param0)
	ret0, _ := ret[0].(map[uint32]*task.TaskInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockTaskStoreRecorder) GetTasksForJob(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetTasksForJob", arg0)
}

func (_m *MockTaskStore) GetTasksForJobAndState(_param0 *job.JobID, _param1 string) (map[uint32]*task.TaskInfo, error) {
	ret := _m.ctrl.Call(_m, "GetTasksForJobAndState", _param0, _param1)
	ret0, _ := ret[0].(map[uint32]*task.TaskInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockTaskStoreRecorder) GetTasksForJobAndState(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetTasksForJobAndState", arg0, arg1)
}

func (_m *MockTaskStore) GetTasksForJobByRange(_param0 *job.JobID, _param1 *task.InstanceRange) (map[uint32]*task.TaskInfo, error) {
	ret := _m.ctrl.Call(_m, "GetTasksForJobByRange", _param0, _param1)
	ret0, _ := ret[0].(map[uint32]*task.TaskInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockTaskStoreRecorder) GetTasksForJobByRange(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetTasksForJobByRange", arg0, arg1)
}

func (_m *MockTaskStore) UpdateTask(_param0 *task.TaskInfo) error {
	ret := _m.ctrl.Call(_m, "UpdateTask", _param0)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockTaskStoreRecorder) UpdateTask(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "UpdateTask", arg0)
}

// Mock of FrameworkInfoStore interface
type MockFrameworkInfoStore struct {
	ctrl     *gomock.Controller
	recorder *_MockFrameworkInfoStoreRecorder
}

// Recorder for MockFrameworkInfoStore (not exported)
type _MockFrameworkInfoStoreRecorder struct {
	mock *MockFrameworkInfoStore
}

func NewMockFrameworkInfoStore(ctrl *gomock.Controller) *MockFrameworkInfoStore {
	mock := &MockFrameworkInfoStore{ctrl: ctrl}
	mock.recorder = &_MockFrameworkInfoStoreRecorder{mock}
	return mock
}

func (_m *MockFrameworkInfoStore) EXPECT() *_MockFrameworkInfoStoreRecorder {
	return _m.recorder
}

func (_m *MockFrameworkInfoStore) GetFrameworkID(_param0 string) (string, error) {
	ret := _m.ctrl.Call(_m, "GetFrameworkID", _param0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockFrameworkInfoStoreRecorder) GetFrameworkID(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetFrameworkID", arg0)
}

func (_m *MockFrameworkInfoStore) GetMesosStreamID(_param0 string) (string, error) {
	ret := _m.ctrl.Call(_m, "GetMesosStreamID", _param0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockFrameworkInfoStoreRecorder) GetMesosStreamID(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetMesosStreamID", arg0)
}

func (_m *MockFrameworkInfoStore) SetMesosFrameworkID(_param0 string, _param1 string) error {
	ret := _m.ctrl.Call(_m, "SetMesosFrameworkID", _param0, _param1)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockFrameworkInfoStoreRecorder) SetMesosFrameworkID(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetMesosFrameworkID", arg0, arg1)
}

func (_m *MockFrameworkInfoStore) SetMesosStreamID(_param0 string, _param1 string) error {
	ret := _m.ctrl.Call(_m, "SetMesosStreamID", _param0, _param1)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockFrameworkInfoStoreRecorder) SetMesosStreamID(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetMesosStreamID", arg0, arg1)
}

// Mock of ResourcePoolStore interface
type MockResourcePoolStore struct {
	ctrl     *gomock.Controller
	recorder *_MockResourcePoolStoreRecorder
}

// Recorder for MockResourcePoolStore (not exported)
type _MockResourcePoolStoreRecorder struct {
	mock *MockResourcePoolStore
}

func NewMockResourcePoolStore(ctrl *gomock.Controller) *MockResourcePoolStore {
	mock := &MockResourcePoolStore{ctrl: ctrl}
	mock.recorder = &_MockResourcePoolStoreRecorder{mock}
	return mock
}

func (_m *MockResourcePoolStore) EXPECT() *_MockResourcePoolStoreRecorder {
	return _m.recorder
}

func (_m *MockResourcePoolStore) CreateResourcePool(_param0 *respool.ResourcePoolID, _param1 *respool.ResourcePoolConfig, _param2 string) error {
	ret := _m.ctrl.Call(_m, "CreateResourcePool", _param0, _param1, _param2)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockResourcePoolStoreRecorder) CreateResourcePool(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CreateResourcePool", arg0, arg1, arg2)
}

func (_m *MockResourcePoolStore) DeleteResourcePool(_param0 *respool.ResourcePoolID) error {
	ret := _m.ctrl.Call(_m, "DeleteResourcePool", _param0)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockResourcePoolStoreRecorder) DeleteResourcePool(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DeleteResourcePool", arg0)
}

func (_m *MockResourcePoolStore) GetAllResourcePools() (map[string]*respool.ResourcePoolConfig, error) {
	ret := _m.ctrl.Call(_m, "GetAllResourcePools")
	ret0, _ := ret[0].(map[string]*respool.ResourcePoolConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockResourcePoolStoreRecorder) GetAllResourcePools() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetAllResourcePools")
}

func (_m *MockResourcePoolStore) GetResourcePool(_param0 *respool.ResourcePoolID) (*respool.ResourcePoolInfo, error) {
	ret := _m.ctrl.Call(_m, "GetResourcePool", _param0)
	ret0, _ := ret[0].(*respool.ResourcePoolInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockResourcePoolStoreRecorder) GetResourcePool(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetResourcePool", arg0)
}

func (_m *MockResourcePoolStore) GetResourcePoolsByOwner(_param0 string) (map[string]*respool.ResourcePoolConfig, error) {
	ret := _m.ctrl.Call(_m, "GetResourcePoolsByOwner", _param0)
	ret0, _ := ret[0].(map[string]*respool.ResourcePoolConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockResourcePoolStoreRecorder) GetResourcePoolsByOwner(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetResourcePoolsByOwner", arg0)
}

func (_m *MockResourcePoolStore) UpdateResourcePool(_param0 *respool.ResourcePoolID, _param1 *respool.ResourcePoolConfig) error {
	ret := _m.ctrl.Call(_m, "UpdateResourcePool", _param0, _param1)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockResourcePoolStoreRecorder) UpdateResourcePool(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "UpdateResourcePool", arg0, arg1)
}
