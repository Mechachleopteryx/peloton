// Code generated by MockGen. DO NOT EDIT.
// Source: code.uber.internal/infra/peloton/resmgr/preemption (interfaces: Preemptor)

package mocks

import (
	reflect "reflect"
	time "time"

	resmgr "code.uber.internal/infra/peloton/.gen/peloton/private/resmgr"
	gomock "github.com/golang/mock/gomock"
)

// MockPreemptor is a mock of Preemptor interface
type MockPreemptor struct {
	ctrl     *gomock.Controller
	recorder *MockPreemptorMockRecorder
}

// MockPreemptorMockRecorder is the mock recorder for MockPreemptor
type MockPreemptorMockRecorder struct {
	mock *MockPreemptor
}

// NewMockPreemptor creates a new mock instance
func NewMockPreemptor(ctrl *gomock.Controller) *MockPreemptor {
	mock := &MockPreemptor{ctrl: ctrl}
	mock.recorder = &MockPreemptorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockPreemptor) EXPECT() *MockPreemptorMockRecorder {
	return _m.recorder
}

// DequeueTask mocks base method
func (_m *MockPreemptor) DequeueTask(_param0 time.Duration) (*resmgr.Task, error) {
	ret := _m.ctrl.Call(_m, "DequeueTask", _param0)
	ret0, _ := ret[0].(*resmgr.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DequeueTask indicates an expected call of DequeueTask
func (_mr *MockPreemptorMockRecorder) DequeueTask(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "DequeueTask", reflect.TypeOf((*MockPreemptor)(nil).DequeueTask), arg0)
}

// Start mocks base method
func (_m *MockPreemptor) Start() error {
	ret := _m.ctrl.Call(_m, "Start")
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start
func (_mr *MockPreemptorMockRecorder) Start() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Start", reflect.TypeOf((*MockPreemptor)(nil).Start))
}

// Stop mocks base method
func (_m *MockPreemptor) Stop() error {
	ret := _m.ctrl.Call(_m, "Stop")
	ret0, _ := ret[0].(error)
	return ret0
}

// Stop indicates an expected call of Stop
func (_mr *MockPreemptorMockRecorder) Stop() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Stop", reflect.TypeOf((*MockPreemptor)(nil).Stop))
}
