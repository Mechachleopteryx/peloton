// Code generated by MockGen. DO NOT EDIT.
// Source: code.uber.internal/infra/peloton/resmgr/respool (interfaces: ResPool,Tree)

package mocks

import (
	list "container/list"
	reflect "reflect"

	peloton "code.uber.internal/infra/peloton/.gen/peloton/api/peloton"
	respool "code.uber.internal/infra/peloton/.gen/peloton/api/respool"
	resmgr "code.uber.internal/infra/peloton/.gen/peloton/private/resmgr"
	resmgrsvc "code.uber.internal/infra/peloton/.gen/peloton/private/resmgrsvc"
	respool0 "code.uber.internal/infra/peloton/resmgr/respool"
	scalar "code.uber.internal/infra/peloton/resmgr/scalar"
	gomock "github.com/golang/mock/gomock"
)

// MockResPool is a mock of ResPool interface
type MockResPool struct {
	ctrl     *gomock.Controller
	recorder *MockResPoolMockRecorder
}

// MockResPoolMockRecorder is the mock recorder for MockResPool
type MockResPoolMockRecorder struct {
	mock *MockResPool
}

// NewMockResPool creates a new mock instance
func NewMockResPool(ctrl *gomock.Controller) *MockResPool {
	mock := &MockResPool{ctrl: ctrl}
	mock.recorder = &MockResPoolMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockResPool) EXPECT() *MockResPoolMockRecorder {
	return _m.recorder
}

// AddInvalidTask mocks base method
func (_m *MockResPool) AddInvalidTask(_param0 *peloton.TaskID) {
	_m.ctrl.Call(_m, "AddInvalidTask", _param0)
}

// AddInvalidTask indicates an expected call of AddInvalidTask
func (_mr *MockResPoolMockRecorder) AddInvalidTask(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "AddInvalidTask", reflect.TypeOf((*MockResPool)(nil).AddInvalidTask), arg0)
}

// AddToAllocation mocks base method
func (_m *MockResPool) AddToAllocation(_param0 *scalar.Resources) error {
	ret := _m.ctrl.Call(_m, "AddToAllocation", _param0)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddToAllocation indicates an expected call of AddToAllocation
func (_mr *MockResPoolMockRecorder) AddToAllocation(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "AddToAllocation", reflect.TypeOf((*MockResPool)(nil).AddToAllocation), arg0)
}

// AddToDemand mocks base method
func (_m *MockResPool) AddToDemand(_param0 *scalar.Resources) error {
	ret := _m.ctrl.Call(_m, "AddToDemand", _param0)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddToDemand indicates an expected call of AddToDemand
func (_mr *MockResPoolMockRecorder) AddToDemand(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "AddToDemand", reflect.TypeOf((*MockResPool)(nil).AddToDemand), arg0)
}

// AggregatedChildrenReservations mocks base method
func (_m *MockResPool) AggregatedChildrenReservations() (map[string]float64, error) {
	ret := _m.ctrl.Call(_m, "AggregatedChildrenReservations")
	ret0, _ := ret[0].(map[string]float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AggregatedChildrenReservations indicates an expected call of AggregatedChildrenReservations
func (_mr *MockResPoolMockRecorder) AggregatedChildrenReservations() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "AggregatedChildrenReservations", reflect.TypeOf((*MockResPool)(nil).AggregatedChildrenReservations))
}

// CalculateAllocation mocks base method
func (_m *MockResPool) CalculateAllocation() *scalar.Resources {
	ret := _m.ctrl.Call(_m, "CalculateAllocation")
	ret0, _ := ret[0].(*scalar.Resources)
	return ret0
}

// CalculateAllocation indicates an expected call of CalculateAllocation
func (_mr *MockResPoolMockRecorder) CalculateAllocation() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "CalculateAllocation", reflect.TypeOf((*MockResPool)(nil).CalculateAllocation))
}

// CalculateDemand mocks base method
func (_m *MockResPool) CalculateDemand() *scalar.Resources {
	ret := _m.ctrl.Call(_m, "CalculateDemand")
	ret0, _ := ret[0].(*scalar.Resources)
	return ret0
}

// CalculateDemand indicates an expected call of CalculateDemand
func (_mr *MockResPoolMockRecorder) CalculateDemand() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "CalculateDemand", reflect.TypeOf((*MockResPool)(nil).CalculateDemand))
}

// Children mocks base method
func (_m *MockResPool) Children() *list.List {
	ret := _m.ctrl.Call(_m, "Children")
	ret0, _ := ret[0].(*list.List)
	return ret0
}

// Children indicates an expected call of Children
func (_mr *MockResPoolMockRecorder) Children() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Children", reflect.TypeOf((*MockResPool)(nil).Children))
}

// DequeueGangList mocks base method
func (_m *MockResPool) DequeueGangList(_param0 int) ([]*resmgrsvc.Gang, error) {
	ret := _m.ctrl.Call(_m, "DequeueGangList", _param0)
	ret0, _ := ret[0].([]*resmgrsvc.Gang)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DequeueGangList indicates an expected call of DequeueGangList
func (_mr *MockResPoolMockRecorder) DequeueGangList(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "DequeueGangList", reflect.TypeOf((*MockResPool)(nil).DequeueGangList), arg0)
}

// EnqueueGang mocks base method
func (_m *MockResPool) EnqueueGang(_param0 *resmgrsvc.Gang) error {
	ret := _m.ctrl.Call(_m, "EnqueueGang", _param0)
	ret0, _ := ret[0].(error)
	return ret0
}

// EnqueueGang indicates an expected call of EnqueueGang
func (_mr *MockResPoolMockRecorder) EnqueueGang(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "EnqueueGang", reflect.TypeOf((*MockResPool)(nil).EnqueueGang), arg0)
}

// GetAllocation mocks base method
func (_m *MockResPool) GetAllocation() *scalar.Resources {
	ret := _m.ctrl.Call(_m, "GetAllocation")
	ret0, _ := ret[0].(*scalar.Resources)
	return ret0
}

// GetAllocation indicates an expected call of GetAllocation
func (_mr *MockResPoolMockRecorder) GetAllocation() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "GetAllocation", reflect.TypeOf((*MockResPool)(nil).GetAllocation))
}

// GetChildReservation mocks base method
func (_m *MockResPool) GetChildReservation() map[string]float64 {
	ret := _m.ctrl.Call(_m, "GetChildReservation")
	ret0, _ := ret[0].(map[string]float64)
	return ret0
}

// GetChildReservation indicates an expected call of GetChildReservation
func (_mr *MockResPoolMockRecorder) GetChildReservation() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "GetChildReservation", reflect.TypeOf((*MockResPool)(nil).GetChildReservation))
}

// GetDemand mocks base method
func (_m *MockResPool) GetDemand() *scalar.Resources {
	ret := _m.ctrl.Call(_m, "GetDemand")
	ret0, _ := ret[0].(*scalar.Resources)
	return ret0
}

// GetDemand indicates an expected call of GetDemand
func (_mr *MockResPoolMockRecorder) GetDemand() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "GetDemand", reflect.TypeOf((*MockResPool)(nil).GetDemand))
}

// GetEntitlement mocks base method
func (_m *MockResPool) GetEntitlement() *scalar.Resources {
	ret := _m.ctrl.Call(_m, "GetEntitlement")
	ret0, _ := ret[0].(*scalar.Resources)
	return ret0
}

// GetEntitlement indicates an expected call of GetEntitlement
func (_mr *MockResPoolMockRecorder) GetEntitlement() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "GetEntitlement", reflect.TypeOf((*MockResPool)(nil).GetEntitlement))
}

// GetPath mocks base method
func (_m *MockResPool) GetPath() string {
	ret := _m.ctrl.Call(_m, "GetPath")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetPath indicates an expected call of GetPath
func (_mr *MockResPoolMockRecorder) GetPath() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "GetPath", reflect.TypeOf((*MockResPool)(nil).GetPath))
}

// ID mocks base method
func (_m *MockResPool) ID() string {
	ret := _m.ctrl.Call(_m, "ID")
	ret0, _ := ret[0].(string)
	return ret0
}

// ID indicates an expected call of ID
func (_mr *MockResPoolMockRecorder) ID() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "ID", reflect.TypeOf((*MockResPool)(nil).ID))
}

// IsLeaf mocks base method
func (_m *MockResPool) IsLeaf() bool {
	ret := _m.ctrl.Call(_m, "IsLeaf")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsLeaf indicates an expected call of IsLeaf
func (_mr *MockResPoolMockRecorder) IsLeaf() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "IsLeaf", reflect.TypeOf((*MockResPool)(nil).IsLeaf))
}

// IsRoot mocks base method
func (_m *MockResPool) IsRoot() bool {
	ret := _m.ctrl.Call(_m, "IsRoot")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsRoot indicates an expected call of IsRoot
func (_mr *MockResPoolMockRecorder) IsRoot() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "IsRoot", reflect.TypeOf((*MockResPool)(nil).IsRoot))
}

// MakeTaskGang mocks base method
func (_m *MockResPool) MakeTaskGang(_param0 *resmgr.Task) *resmgrsvc.Gang {
	ret := _m.ctrl.Call(_m, "MakeTaskGang", _param0)
	ret0, _ := ret[0].(*resmgrsvc.Gang)
	return ret0
}

// MakeTaskGang indicates an expected call of MakeTaskGang
func (_mr *MockResPoolMockRecorder) MakeTaskGang(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "MakeTaskGang", reflect.TypeOf((*MockResPool)(nil).MakeTaskGang), arg0)
}

// Name mocks base method
func (_m *MockResPool) Name() string {
	ret := _m.ctrl.Call(_m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name
func (_mr *MockResPoolMockRecorder) Name() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Name", reflect.TypeOf((*MockResPool)(nil).Name))
}

// Parent mocks base method
func (_m *MockResPool) Parent() respool0.ResPool {
	ret := _m.ctrl.Call(_m, "Parent")
	ret0, _ := ret[0].(respool0.ResPool)
	return ret0
}

// Parent indicates an expected call of Parent
func (_mr *MockResPoolMockRecorder) Parent() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Parent", reflect.TypeOf((*MockResPool)(nil).Parent))
}

// ResourcePoolConfig mocks base method
func (_m *MockResPool) ResourcePoolConfig() *respool.ResourcePoolConfig {
	ret := _m.ctrl.Call(_m, "ResourcePoolConfig")
	ret0, _ := ret[0].(*respool.ResourcePoolConfig)
	return ret0
}

// ResourcePoolConfig indicates an expected call of ResourcePoolConfig
func (_mr *MockResPoolMockRecorder) ResourcePoolConfig() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "ResourcePoolConfig", reflect.TypeOf((*MockResPool)(nil).ResourcePoolConfig))
}

// Resources mocks base method
func (_m *MockResPool) Resources() map[string]*respool.ResourceConfig {
	ret := _m.ctrl.Call(_m, "Resources")
	ret0, _ := ret[0].(map[string]*respool.ResourceConfig)
	return ret0
}

// Resources indicates an expected call of Resources
func (_mr *MockResPoolMockRecorder) Resources() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Resources", reflect.TypeOf((*MockResPool)(nil).Resources))
}

// SetAllocation mocks base method
func (_m *MockResPool) SetAllocation(_param0 *scalar.Resources) {
	_m.ctrl.Call(_m, "SetAllocation", _param0)
}

// SetAllocation indicates an expected call of SetAllocation
func (_mr *MockResPoolMockRecorder) SetAllocation(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "SetAllocation", reflect.TypeOf((*MockResPool)(nil).SetAllocation), arg0)
}

// SetChildren mocks base method
func (_m *MockResPool) SetChildren(_param0 *list.List) {
	_m.ctrl.Call(_m, "SetChildren", _param0)
}

// SetChildren indicates an expected call of SetChildren
func (_mr *MockResPoolMockRecorder) SetChildren(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "SetChildren", reflect.TypeOf((*MockResPool)(nil).SetChildren), arg0)
}

// SetEntitlement mocks base method
func (_m *MockResPool) SetEntitlement(_param0 map[string]float64) {
	_m.ctrl.Call(_m, "SetEntitlement", _param0)
}

// SetEntitlement indicates an expected call of SetEntitlement
func (_mr *MockResPoolMockRecorder) SetEntitlement(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "SetEntitlement", reflect.TypeOf((*MockResPool)(nil).SetEntitlement), arg0)
}

// SetEntitlementByKind mocks base method
func (_m *MockResPool) SetEntitlementByKind(_param0 string, _param1 float64) {
	_m.ctrl.Call(_m, "SetEntitlementByKind", _param0, _param1)
}

// SetEntitlementByKind indicates an expected call of SetEntitlementByKind
func (_mr *MockResPoolMockRecorder) SetEntitlementByKind(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "SetEntitlementByKind", reflect.TypeOf((*MockResPool)(nil).SetEntitlementByKind), arg0, arg1)
}

// SetEntitlementResources mocks base method
func (_m *MockResPool) SetEntitlementResources(_param0 *scalar.Resources) {
	_m.ctrl.Call(_m, "SetEntitlementResources", _param0)
}

// SetEntitlementResources indicates an expected call of SetEntitlementResources
func (_mr *MockResPoolMockRecorder) SetEntitlementResources(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "SetEntitlementResources", reflect.TypeOf((*MockResPool)(nil).SetEntitlementResources), arg0)
}

// SetParent mocks base method
func (_m *MockResPool) SetParent(_param0 respool0.ResPool) {
	_m.ctrl.Call(_m, "SetParent", _param0)
}

// SetParent indicates an expected call of SetParent
func (_mr *MockResPoolMockRecorder) SetParent(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "SetParent", reflect.TypeOf((*MockResPool)(nil).SetParent), arg0)
}

// SetResourceConfig mocks base method
func (_m *MockResPool) SetResourceConfig(_param0 *respool.ResourceConfig) {
	_m.ctrl.Call(_m, "SetResourceConfig", _param0)
}

// SetResourceConfig indicates an expected call of SetResourceConfig
func (_mr *MockResPoolMockRecorder) SetResourceConfig(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "SetResourceConfig", reflect.TypeOf((*MockResPool)(nil).SetResourceConfig), arg0)
}

// SetResourcePoolConfig mocks base method
func (_m *MockResPool) SetResourcePoolConfig(_param0 *respool.ResourcePoolConfig) {
	_m.ctrl.Call(_m, "SetResourcePoolConfig", _param0)
}

// SetResourcePoolConfig indicates an expected call of SetResourcePoolConfig
func (_mr *MockResPoolMockRecorder) SetResourcePoolConfig(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "SetResourcePoolConfig", reflect.TypeOf((*MockResPool)(nil).SetResourcePoolConfig), arg0)
}

// SubtractFromAllocation mocks base method
func (_m *MockResPool) SubtractFromAllocation(_param0 *scalar.Resources) error {
	ret := _m.ctrl.Call(_m, "SubtractFromAllocation", _param0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SubtractFromAllocation indicates an expected call of SubtractFromAllocation
func (_mr *MockResPoolMockRecorder) SubtractFromAllocation(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "SubtractFromAllocation", reflect.TypeOf((*MockResPool)(nil).SubtractFromAllocation), arg0)
}

// SubtractFromDemand mocks base method
func (_m *MockResPool) SubtractFromDemand(_param0 *scalar.Resources) error {
	ret := _m.ctrl.Call(_m, "SubtractFromDemand", _param0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SubtractFromDemand indicates an expected call of SubtractFromDemand
func (_mr *MockResPoolMockRecorder) SubtractFromDemand(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "SubtractFromDemand", reflect.TypeOf((*MockResPool)(nil).SubtractFromDemand), arg0)
}

// ToResourcePoolInfo mocks base method
func (_m *MockResPool) ToResourcePoolInfo() *respool.ResourcePoolInfo {
	ret := _m.ctrl.Call(_m, "ToResourcePoolInfo")
	ret0, _ := ret[0].(*respool.ResourcePoolInfo)
	return ret0
}

// ToResourcePoolInfo indicates an expected call of ToResourcePoolInfo
func (_mr *MockResPoolMockRecorder) ToResourcePoolInfo() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "ToResourcePoolInfo", reflect.TypeOf((*MockResPool)(nil).ToResourcePoolInfo))
}

// MockTree is a mock of Tree interface
type MockTree struct {
	ctrl     *gomock.Controller
	recorder *MockTreeMockRecorder
}

// MockTreeMockRecorder is the mock recorder for MockTree
type MockTreeMockRecorder struct {
	mock *MockTree
}

// NewMockTree creates a new mock instance
func NewMockTree(ctrl *gomock.Controller) *MockTree {
	mock := &MockTree{ctrl: ctrl}
	mock.recorder = &MockTreeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockTree) EXPECT() *MockTreeMockRecorder {
	return _m.recorder
}

// Delete mocks base method
func (_m *MockTree) Delete(_param0 *peloton.ResourcePoolID) error {
	ret := _m.ctrl.Call(_m, "Delete", _param0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (_mr *MockTreeMockRecorder) Delete(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Delete", reflect.TypeOf((*MockTree)(nil).Delete), arg0)
}

// Get mocks base method
func (_m *MockTree) Get(_param0 *peloton.ResourcePoolID) (respool0.ResPool, error) {
	ret := _m.ctrl.Call(_m, "Get", _param0)
	ret0, _ := ret[0].(respool0.ResPool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (_mr *MockTreeMockRecorder) Get(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Get", reflect.TypeOf((*MockTree)(nil).Get), arg0)
}

// GetAllNodes mocks base method
func (_m *MockTree) GetAllNodes(_param0 bool) *list.List {
	ret := _m.ctrl.Call(_m, "GetAllNodes", _param0)
	ret0, _ := ret[0].(*list.List)
	return ret0
}

// GetAllNodes indicates an expected call of GetAllNodes
func (_mr *MockTreeMockRecorder) GetAllNodes(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "GetAllNodes", reflect.TypeOf((*MockTree)(nil).GetAllNodes), arg0)
}

// GetByPath mocks base method
func (_m *MockTree) GetByPath(_param0 *respool.ResourcePoolPath) (respool0.ResPool, error) {
	ret := _m.ctrl.Call(_m, "GetByPath", _param0)
	ret0, _ := ret[0].(respool0.ResPool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByPath indicates an expected call of GetByPath
func (_mr *MockTreeMockRecorder) GetByPath(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "GetByPath", reflect.TypeOf((*MockTree)(nil).GetByPath), arg0)
}

// Start mocks base method
func (_m *MockTree) Start() error {
	ret := _m.ctrl.Call(_m, "Start")
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start
func (_mr *MockTreeMockRecorder) Start() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Start", reflect.TypeOf((*MockTree)(nil).Start))
}

// Stop mocks base method
func (_m *MockTree) Stop() error {
	ret := _m.ctrl.Call(_m, "Stop")
	ret0, _ := ret[0].(error)
	return ret0
}

// Stop indicates an expected call of Stop
func (_mr *MockTreeMockRecorder) Stop() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Stop", reflect.TypeOf((*MockTree)(nil).Stop))
}

// UpdatedChannel mocks base method
func (_m *MockTree) UpdatedChannel() <-chan struct{} {
	ret := _m.ctrl.Call(_m, "UpdatedChannel")
	ret0, _ := ret[0].(<-chan struct{})
	return ret0
}

// UpdatedChannel indicates an expected call of UpdatedChannel
func (_mr *MockTreeMockRecorder) UpdatedChannel() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "UpdatedChannel", reflect.TypeOf((*MockTree)(nil).UpdatedChannel))
}

// Upsert mocks base method
func (_m *MockTree) Upsert(_param0 *peloton.ResourcePoolID, _param1 *respool.ResourcePoolConfig) error {
	ret := _m.ctrl.Call(_m, "Upsert", _param0, _param1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Upsert indicates an expected call of Upsert
func (_mr *MockTreeMockRecorder) Upsert(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Upsert", reflect.TypeOf((*MockTree)(nil).Upsert), arg0, arg1)
}
