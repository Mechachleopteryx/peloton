// Code generated by MockGen. DO NOT EDIT.
// Source: code.uber.internal/infra/peloton/hostmgr/summary (interfaces: HostSummary)

package mocks

import (
	context "context"
	reflect "reflect"
	time "time"

	v1 "code.uber.internal/infra/peloton/.gen/mesos/v1"
	hostsvc "code.uber.internal/infra/peloton/.gen/peloton/private/hostmgr/hostsvc"
	constraints "code.uber.internal/infra/peloton/common/constraints"
	scalar "code.uber.internal/infra/peloton/hostmgr/scalar"
	summary "code.uber.internal/infra/peloton/hostmgr/summary"
	gomock "github.com/golang/mock/gomock"
)

// MockHostSummary is a mock of HostSummary interface
type MockHostSummary struct {
	ctrl     *gomock.Controller
	recorder *MockHostSummaryMockRecorder
}

// MockHostSummaryMockRecorder is the mock recorder for MockHostSummary
type MockHostSummaryMockRecorder struct {
	mock *MockHostSummary
}

// NewMockHostSummary creates a new mock instance
func NewMockHostSummary(ctrl *gomock.Controller) *MockHostSummary {
	mock := &MockHostSummary{ctrl: ctrl}
	mock.recorder = &MockHostSummaryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockHostSummary) EXPECT() *MockHostSummaryMockRecorder {
	return _m.recorder
}

// AddMesosOffer mocks base method
func (_m *MockHostSummary) AddMesosOffer(_param0 context.Context, _param1 *v1.Offer) summary.CacheStatus {
	ret := _m.ctrl.Call(_m, "AddMesosOffer", _param0, _param1)
	ret0, _ := ret[0].(summary.CacheStatus)
	return ret0
}

// AddMesosOffer indicates an expected call of AddMesosOffer
func (_mr *MockHostSummaryMockRecorder) AddMesosOffer(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "AddMesosOffer", reflect.TypeOf((*MockHostSummary)(nil).AddMesosOffer), arg0, arg1)
}

// CasStatus mocks base method
func (_m *MockHostSummary) CasStatus(_param0 summary.CacheStatus, _param1 summary.CacheStatus) error {
	ret := _m.ctrl.Call(_m, "CasStatus", _param0, _param1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CasStatus indicates an expected call of CasStatus
func (_mr *MockHostSummaryMockRecorder) CasStatus(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "CasStatus", reflect.TypeOf((*MockHostSummary)(nil).CasStatus), arg0, arg1)
}

// ClaimForLaunch mocks base method
func (_m *MockHostSummary) ClaimForLaunch() (map[string]*v1.Offer, error) {
	ret := _m.ctrl.Call(_m, "ClaimForLaunch")
	ret0, _ := ret[0].(map[string]*v1.Offer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ClaimForLaunch indicates an expected call of ClaimForLaunch
func (_mr *MockHostSummaryMockRecorder) ClaimForLaunch() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "ClaimForLaunch", reflect.TypeOf((*MockHostSummary)(nil).ClaimForLaunch))
}

// ClaimReservedOffersForLaunch mocks base method
func (_m *MockHostSummary) ClaimReservedOffersForLaunch() (map[string]*v1.Offer, error) {
	ret := _m.ctrl.Call(_m, "ClaimReservedOffersForLaunch")
	ret0, _ := ret[0].(map[string]*v1.Offer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ClaimReservedOffersForLaunch indicates an expected call of ClaimReservedOffersForLaunch
func (_mr *MockHostSummaryMockRecorder) ClaimReservedOffersForLaunch() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "ClaimReservedOffersForLaunch", reflect.TypeOf((*MockHostSummary)(nil).ClaimReservedOffersForLaunch))
}

// HasAnyOffer mocks base method
func (_m *MockHostSummary) HasAnyOffer() bool {
	ret := _m.ctrl.Call(_m, "HasAnyOffer")
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasAnyOffer indicates an expected call of HasAnyOffer
func (_mr *MockHostSummaryMockRecorder) HasAnyOffer() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "HasAnyOffer", reflect.TypeOf((*MockHostSummary)(nil).HasAnyOffer))
}

// HasOffer mocks base method
func (_m *MockHostSummary) HasOffer() bool {
	ret := _m.ctrl.Call(_m, "HasOffer")
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasOffer indicates an expected call of HasOffer
func (_mr *MockHostSummaryMockRecorder) HasOffer() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "HasOffer", reflect.TypeOf((*MockHostSummary)(nil).HasOffer))
}

// RemoveMesosOffer mocks base method
func (_m *MockHostSummary) RemoveMesosOffer(_param0 string) (summary.CacheStatus, *v1.Offer) {
	ret := _m.ctrl.Call(_m, "RemoveMesosOffer", _param0)
	ret0, _ := ret[0].(summary.CacheStatus)
	ret1, _ := ret[1].(*v1.Offer)
	return ret0, ret1
}

// RemoveMesosOffer indicates an expected call of RemoveMesosOffer
func (_mr *MockHostSummaryMockRecorder) RemoveMesosOffer(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "RemoveMesosOffer", reflect.TypeOf((*MockHostSummary)(nil).RemoveMesosOffer), arg0)
}

// RemoveUnusedReservedOffers mocks base method
func (_m *MockHostSummary) RemoveUnusedReservedOffers() []*v1.Offer {
	ret := _m.ctrl.Call(_m, "RemoveUnusedReservedOffers")
	ret0, _ := ret[0].([]*v1.Offer)
	return ret0
}

// RemoveUnusedReservedOffers indicates an expected call of RemoveUnusedReservedOffers
func (_mr *MockHostSummaryMockRecorder) RemoveUnusedReservedOffers() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "RemoveUnusedReservedOffers", reflect.TypeOf((*MockHostSummary)(nil).RemoveUnusedReservedOffers))
}

// ResetExpiredPlacingOfferStatus mocks base method
func (_m *MockHostSummary) ResetExpiredPlacingOfferStatus(_param0 time.Time) (bool, scalar.Resources) {
	ret := _m.ctrl.Call(_m, "ResetExpiredPlacingOfferStatus", _param0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(scalar.Resources)
	return ret0, ret1
}

// ResetExpiredPlacingOfferStatus indicates an expected call of ResetExpiredPlacingOfferStatus
func (_mr *MockHostSummaryMockRecorder) ResetExpiredPlacingOfferStatus(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "ResetExpiredPlacingOfferStatus", reflect.TypeOf((*MockHostSummary)(nil).ResetExpiredPlacingOfferStatus), arg0)
}

// TryMatch mocks base method
func (_m *MockHostSummary) TryMatch(_param0 *hostsvc.HostFilter, _param1 constraints.Evaluator) (hostsvc.HostFilterResult, []*v1.Offer) {
	ret := _m.ctrl.Call(_m, "TryMatch", _param0, _param1)
	ret0, _ := ret[0].(hostsvc.HostFilterResult)
	ret1, _ := ret[1].([]*v1.Offer)
	return ret0, ret1
}

// TryMatch indicates an expected call of TryMatch
func (_mr *MockHostSummaryMockRecorder) TryMatch(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "TryMatch", reflect.TypeOf((*MockHostSummary)(nil).TryMatch), arg0, arg1)
}

// UnreservedAmount mocks base method
func (_m *MockHostSummary) UnreservedAmount() scalar.Resources {
	ret := _m.ctrl.Call(_m, "UnreservedAmount")
	ret0, _ := ret[0].(scalar.Resources)
	return ret0
}

// UnreservedAmount indicates an expected call of UnreservedAmount
func (_mr *MockHostSummaryMockRecorder) UnreservedAmount() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "UnreservedAmount", reflect.TypeOf((*MockHostSummary)(nil).UnreservedAmount))
}
