// Code generated by MockGen. DO NOT EDIT.
// Source: code.uber.internal/infra/peloton/hostmgr/offer (interfaces: EventHandler)

package mocks

import (
	reflect "reflect"

	offerpool "code.uber.internal/infra/peloton/hostmgr/offer/offerpool"
	gomock "github.com/golang/mock/gomock"
)

// MockEventHandler is a mock of EventHandler interface
type MockEventHandler struct {
	ctrl     *gomock.Controller
	recorder *MockEventHandlerMockRecorder
}

// MockEventHandlerMockRecorder is the mock recorder for MockEventHandler
type MockEventHandlerMockRecorder struct {
	mock *MockEventHandler
}

// NewMockEventHandler creates a new mock instance
func NewMockEventHandler(ctrl *gomock.Controller) *MockEventHandler {
	mock := &MockEventHandler{ctrl: ctrl}
	mock.recorder = &MockEventHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockEventHandler) EXPECT() *MockEventHandlerMockRecorder {
	return _m.recorder
}

// GetOfferPool mocks base method
func (_m *MockEventHandler) GetOfferPool() offerpool.Pool {
	ret := _m.ctrl.Call(_m, "GetOfferPool")
	ret0, _ := ret[0].(offerpool.Pool)
	return ret0
}

// GetOfferPool indicates an expected call of GetOfferPool
func (_mr *MockEventHandlerMockRecorder) GetOfferPool() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "GetOfferPool", reflect.TypeOf((*MockEventHandler)(nil).GetOfferPool))
}

// Start mocks base method
func (_m *MockEventHandler) Start() error {
	ret := _m.ctrl.Call(_m, "Start")
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start
func (_mr *MockEventHandlerMockRecorder) Start() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Start", reflect.TypeOf((*MockEventHandler)(nil).Start))
}

// Stop mocks base method
func (_m *MockEventHandler) Stop() error {
	ret := _m.ctrl.Call(_m, "Stop")
	ret0, _ := ret[0].(error)
	return ret0
}

// Stop indicates an expected call of Stop
func (_mr *MockEventHandlerMockRecorder) Stop() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Stop", reflect.TypeOf((*MockEventHandler)(nil).Stop))
}
