// Code generated by MockGen. DO NOT EDIT.
// Source: code.uber.internal/infra/peloton/placement/offers (interfaces: Service)

package mocks

import (
	context "context"
	reflect "reflect"

	hostsvc "code.uber.internal/infra/peloton/.gen/peloton/private/hostmgr/hostsvc"
	resmgr "code.uber.internal/infra/peloton/.gen/peloton/private/resmgr"
	models "code.uber.internal/infra/peloton/placement/models"
	gomock "github.com/golang/mock/gomock"
)

// MockService is a mock of Service interface
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockService) EXPECT() *MockServiceMockRecorder {
	return _m.recorder
}

// Acquire mocks base method
func (_m *MockService) Acquire(_param0 context.Context, _param1 bool, _param2 resmgr.TaskType, _param3 *hostsvc.HostFilter) []*models.Host {
	ret := _m.ctrl.Call(_m, "Acquire", _param0, _param1, _param2, _param3)
	ret0, _ := ret[0].([]*models.Host)
	return ret0
}

// Acquire indicates an expected call of Acquire
func (_mr *MockServiceMockRecorder) Acquire(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Acquire", reflect.TypeOf((*MockService)(nil).Acquire), arg0, arg1, arg2, arg3)
}

// Release mocks base method
func (_m *MockService) Release(_param0 context.Context, _param1 []*models.Host) {
	_m.ctrl.Call(_m, "Release", _param0, _param1)
}

// Release indicates an expected call of Release
func (_mr *MockServiceMockRecorder) Release(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Release", reflect.TypeOf((*MockService)(nil).Release), arg0, arg1)
}
