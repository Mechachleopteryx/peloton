// Code generated by MockGen. DO NOT EDIT.
// Source: code.uber.internal/infra/peloton/placement/plugins (interfaces: Strategy)

package mocks

import (
	reflect "reflect"

	hostsvc "code.uber.internal/infra/peloton/.gen/peloton/private/hostmgr/hostsvc"
	models "code.uber.internal/infra/peloton/placement/models"
	gomock "github.com/golang/mock/gomock"
)

// MockStrategy is a mock of Strategy interface
type MockStrategy struct {
	ctrl     *gomock.Controller
	recorder *MockStrategyMockRecorder
}

// MockStrategyMockRecorder is the mock recorder for MockStrategy
type MockStrategyMockRecorder struct {
	mock *MockStrategy
}

// NewMockStrategy creates a new mock instance
func NewMockStrategy(ctrl *gomock.Controller) *MockStrategy {
	mock := &MockStrategy{ctrl: ctrl}
	mock.recorder = &MockStrategyMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockStrategy) EXPECT() *MockStrategyMockRecorder {
	return _m.recorder
}

// ConcurrencySafe mocks base method
func (_m *MockStrategy) ConcurrencySafe() bool {
	ret := _m.ctrl.Call(_m, "ConcurrencySafe")
	ret0, _ := ret[0].(bool)
	return ret0
}

// ConcurrencySafe indicates an expected call of ConcurrencySafe
func (_mr *MockStrategyMockRecorder) ConcurrencySafe() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "ConcurrencySafe", reflect.TypeOf((*MockStrategy)(nil).ConcurrencySafe))
}

// Filters mocks base method
func (_m *MockStrategy) Filters(_param0 []*models.Assignment) map[*hostsvc.HostFilter][]*models.Assignment {
	ret := _m.ctrl.Call(_m, "Filters", _param0)
	ret0, _ := ret[0].(map[*hostsvc.HostFilter][]*models.Assignment)
	return ret0
}

// Filters indicates an expected call of Filters
func (_mr *MockStrategyMockRecorder) Filters(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Filters", reflect.TypeOf((*MockStrategy)(nil).Filters), arg0)
}

// PlaceOnce mocks base method
func (_m *MockStrategy) PlaceOnce(_param0 []*models.Assignment, _param1 []*models.Host) {
	_m.ctrl.Call(_m, "PlaceOnce", _param0, _param1)
}

// PlaceOnce indicates an expected call of PlaceOnce
func (_mr *MockStrategyMockRecorder) PlaceOnce(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "PlaceOnce", reflect.TypeOf((*MockStrategy)(nil).PlaceOnce), arg0, arg1)
}
