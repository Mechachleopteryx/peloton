// Code generated by MockGen. DO NOT EDIT.
// Source: code.uber.internal/infra/peloton/placement/tasks (interfaces: Service)

package mocks

import (
	context "context"
	reflect "reflect"

	resmgr "code.uber.internal/infra/peloton/.gen/peloton/private/resmgr"
	models "code.uber.internal/infra/peloton/placement/models"
	gomock "github.com/golang/mock/gomock"
)

// MockService is a mock of Service interface
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockService) EXPECT() *MockServiceMockRecorder {
	return _m.recorder
}

// Dequeue mocks base method
func (_m *MockService) Dequeue(_param0 context.Context, _param1 resmgr.TaskType, _param2 int, _param3 int) []*models.Assignment {
	ret := _m.ctrl.Call(_m, "Dequeue", _param0, _param1, _param2, _param3)
	ret0, _ := ret[0].([]*models.Assignment)
	return ret0
}

// Dequeue indicates an expected call of Dequeue
func (_mr *MockServiceMockRecorder) Dequeue(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Dequeue", reflect.TypeOf((*MockService)(nil).Dequeue), arg0, arg1, arg2, arg3)
}

// Enqueue mocks base method
func (_m *MockService) Enqueue(_param0 context.Context, _param1 []*models.Assignment) {
	_m.ctrl.Call(_m, "Enqueue", _param0, _param1)
}

// Enqueue indicates an expected call of Enqueue
func (_mr *MockServiceMockRecorder) Enqueue(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Enqueue", reflect.TypeOf((*MockService)(nil).Enqueue), arg0, arg1)
}

// SetPlacements mocks base method
func (_m *MockService) SetPlacements(_param0 context.Context, _param1 []*resmgr.Placement) {
	_m.ctrl.Call(_m, "SetPlacements", _param0, _param1)
}

// SetPlacements indicates an expected call of SetPlacements
func (_mr *MockServiceMockRecorder) SetPlacements(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "SetPlacements", reflect.TypeOf((*MockService)(nil).SetPlacements), arg0, arg1)
}
