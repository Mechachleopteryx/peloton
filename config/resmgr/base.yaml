storage:
  mysql:
    user: peloton
    password: peloton
    database: peloton
    host: 127.0.0.1
    port: 8193
    migrations: storage/mysql/migrations/
    # max_batch_size_rows controls how many tasks are created/updated in 1
    # insert statement. Increasing this will improve startup times for high task
    # count jobs. WARNING: tuning this up beyond the threshold of MYSQL_PACKET_SIZE
    # may result in failed task creations
    max_batch_size_rows: 500
    conn_lifetime: 30s
  cassandra:
    # FIXME: need to increase batch size limit dynamically in cassandra (T968823)
    max_batch_size_rows: 1
    max_parallel_batches: 1000
    connection:
      contactPoints: ["127.0.0.1"]
      port: 9042
      consistency: LOCAL_QUORUM
      # Need to increase timeout from 10s to 20s to avoid recovery code from timing out
      # We saw recovery code timing out when peloton was recovering from a
      # Cassandra latency spike issue.
      timeout: 20s
    store_name: peloton_test
    migrations: storage/cassandra/migrations/
  use_cassandra: true

resmgr:
  http_port: 5290
  grpc_port: 5394
  task_scheduling_period: 100ms
  entitlement_calculation_period: 60s
  task_reconciliation_period: 1h
  task:
    placing_timeout: 10m
    launching_timeout: 20m
    # This is the backoff period how much it will backoff
    # in each cycle.
    placement_retry_backoff: 5m
    # This is the cycle which is going to repeat
    # after these many attempts.
    placement_retry_cycle: 3
    # This is the policy name for the backoff
    # which is going to dictate the backoff
    backoff_policy_name: exponential-policy
    # This flag enable/disable the placement backoff
    enable_placement_backoff: true

  preemption:
    task_preemption_period: 60s
    sustained_over_allocation_count: 5
    enabled: true

election:
  root: "/peloton"

health:
  heartbeat_interval: 5s
