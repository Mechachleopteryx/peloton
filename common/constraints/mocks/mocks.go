// Code generated by MockGen. DO NOT EDIT.
// Source: code.uber.internal/infra/peloton/common/constraints (interfaces: Evaluator)

package mocks

import (
	reflect "reflect"

	task "code.uber.internal/infra/peloton/.gen/peloton/api/task"
	constraints "code.uber.internal/infra/peloton/common/constraints"
	gomock "github.com/golang/mock/gomock"
)

// MockEvaluator is a mock of Evaluator interface
type MockEvaluator struct {
	ctrl     *gomock.Controller
	recorder *MockEvaluatorMockRecorder
}

// MockEvaluatorMockRecorder is the mock recorder for MockEvaluator
type MockEvaluatorMockRecorder struct {
	mock *MockEvaluator
}

// NewMockEvaluator creates a new mock instance
func NewMockEvaluator(ctrl *gomock.Controller) *MockEvaluator {
	mock := &MockEvaluator{ctrl: ctrl}
	mock.recorder = &MockEvaluatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockEvaluator) EXPECT() *MockEvaluatorMockRecorder {
	return _m.recorder
}

// Evaluate mocks base method
func (_m *MockEvaluator) Evaluate(_param0 *task.Constraint, _param1 constraints.LabelValues) (constraints.EvaluateResult, error) {
	ret := _m.ctrl.Call(_m, "Evaluate", _param0, _param1)
	ret0, _ := ret[0].(constraints.EvaluateResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Evaluate indicates an expected call of Evaluate
func (_mr *MockEvaluatorMockRecorder) Evaluate(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Evaluate", reflect.TypeOf((*MockEvaluator)(nil).Evaluate), arg0, arg1)
}
