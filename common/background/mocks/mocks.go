// Code generated by MockGen. DO NOT EDIT.
// Source: code.uber.internal/infra/peloton/common/background (interfaces: Manager)

package mocks

import (
	reflect "reflect"

	background "code.uber.internal/infra/peloton/common/background"
	gomock "github.com/golang/mock/gomock"
)

// MockManager is a mock of Manager interface
type MockManager struct {
	ctrl     *gomock.Controller
	recorder *MockManagerMockRecorder
}

// MockManagerMockRecorder is the mock recorder for MockManager
type MockManagerMockRecorder struct {
	mock *MockManager
}

// NewMockManager creates a new mock instance
func NewMockManager(ctrl *gomock.Controller) *MockManager {
	mock := &MockManager{ctrl: ctrl}
	mock.recorder = &MockManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockManager) EXPECT() *MockManagerMockRecorder {
	return _m.recorder
}

// RegisterWorks mocks base method
func (_m *MockManager) RegisterWorks(_param0 ...background.Work) error {
	_s := []interface{}{}
	for _, _x := range _param0 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "RegisterWorks", _s...)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterWorks indicates an expected call of RegisterWorks
func (_mr *MockManagerMockRecorder) RegisterWorks(arg0 ...interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "RegisterWorks", reflect.TypeOf((*MockManager)(nil).RegisterWorks), arg0...)
}

// Start mocks base method
func (_m *MockManager) Start() {
	_m.ctrl.Call(_m, "Start")
}

// Start indicates an expected call of Start
func (_mr *MockManagerMockRecorder) Start() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Start", reflect.TypeOf((*MockManager)(nil).Start))
}

// Stop mocks base method
func (_m *MockManager) Stop() {
	_m.ctrl.Call(_m, "Stop")
}

// Stop indicates an expected call of Stop
func (_mr *MockManagerMockRecorder) Stop() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Stop", reflect.TypeOf((*MockManager)(nil).Stop))
}
