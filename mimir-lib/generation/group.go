// @generated AUTO GENERATED - DO NOT EDIT! 9f8b9e47d86b5e1a3668856830c149e768e78415
// Copyright (c) 2018 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

package generation

import (
	"fmt"
	"time"

	"code.uber.internal/infra/peloton/mimir-lib/model/labels"
	"code.uber.internal/infra/peloton/mimir-lib/model/metrics"
	"code.uber.internal/infra/peloton/mimir-lib/model/placement"
)

// GroupBuilder is used to generate new groups for use in tests and benchmarks.
type GroupBuilder interface {
	// Name will use the Label.String() method value of the generated value from the label template.
	Name(template labels.LabelTemplate) GroupBuilder

	// AddMetrics will add the metrics of the given types with the given distribution.
	AddMetrics(value Distribution, metricTypes ...metrics.MetricType) GroupBuilder

	// AddLabel will add a label generated by the label template.
	AddLabel(template labels.LabelTemplate) GroupBuilder

	// Generate will generate a group that depends on the random source and the time.
	Generate(random Random, time time.Duration) *placement.Group
}

// NewGroupBuilder will create a new group builder for generating groups.
func NewGroupBuilder() GroupBuilder {
	return &groupBuilder{
		name:    labels.NewLabelTemplate(),
		metrics: map[*metricGroup]Distribution{},
		labels:  map[labels.LabelTemplate]struct{}{},
	}
}

type metricGroup struct {
	metricTypes []metrics.MetricType
}

type groupBuilder struct {
	name    labels.LabelTemplate
	metrics map[*metricGroup]Distribution
	labels  map[labels.LabelTemplate]struct{}
}

func (builder *groupBuilder) Name(template labels.LabelTemplate) GroupBuilder {
	builder.name = template
	return builder
}

func (builder *groupBuilder) AddMetrics(value Distribution, metricTypes ...metrics.MetricType) GroupBuilder {
	group := &metricGroup{
		metricTypes: metricTypes,
	}
	builder.metrics[group] = value
	return builder
}

func (builder *groupBuilder) AddLabel(template labels.LabelTemplate) GroupBuilder {
	builder.labels[template] = struct{}{}
	return builder
}

func (builder *groupBuilder) Generate(random Random, time time.Duration) *placement.Group {
	result := placement.NewGroup(builder.name.Instantiate().String())
	for group, distribution := range builder.metrics {
		value := distribution.Value(random, time)
		for _, metricType := range group.metricTypes {
			result.Metrics.Set(metricType, value)
		}
	}
	for factory := range builder.labels {
		result.Labels.Add(factory.Instantiate())
	}
	return result
}

// CreateHostGroupsBuilder will create a builder to generate groups representing hosts that belong to a rack in a
// datacenter.
func CreateHostGroupsBuilder() (builder GroupBuilder, templates labels.TemplateSet) {
	builder = NewGroupBuilder()
	templates = labels.NewTemplateSet()
	nameFormat := fmt.Sprintf("schemadock%v-%v", Host.Variable(), Datacenter.Variable())
	nameTemplate := labels.NewLabelTemplate(nameFormat)
	templates.Add(nameTemplate)
	hostTemplate := labels.NewLabelTemplate(Host.Name(), nameFormat)
	templates.Add(hostTemplate)
	rackTemplate := labels.NewLabelTemplate(Rack.Name(), Rack.Variable())
	templates.Add(rackTemplate)
	datacenterTemplate := labels.NewLabelTemplate(Datacenter.Name(), Datacenter.Variable())
	templates.Add(datacenterTemplate)
	volumeTemplate := labels.NewLabelTemplate(VolumeType.Name(), "local")
	memoryDistribution := NewDiscrete(map[float64]float64{128 * metrics.GiB: 1, 256 * metrics.GiB: 5})
	builder.Name(nameTemplate).
		AddLabel(hostTemplate).
		AddLabel(rackTemplate).
		AddLabel(datacenterTemplate).
		AddLabel(volumeTemplate).
		AddMetrics(NewUniformDiscrete(6*metrics.TiB), metrics.DiskTotal, metrics.DiskFree).
		AddMetrics(memoryDistribution, metrics.MemoryTotal, metrics.MemoryFree).
		AddMetrics(NewUniformDiscrete(0), metrics.DiskUsed, metrics.MemoryUsed)
	return
}

// CreateHostGroups will create a given number of groups representing hosts distributed over a given number of racks
// and all belonging to the same datacenter.
func CreateHostGroups(random Random, builder GroupBuilder, templates labels.TemplateSet, racks,
	hosts int) []*placement.Group {
	groups := []*placement.Group{}
	for i := 0; i < hosts; i++ {
		datacenter := templates.Mappings()[Datacenter.Name()]
		templates.Bind(Rack.Name(), fmt.Sprintf("%v-a%v", datacenter, i%racks))
		templates.Bind(Host.Name(), fmt.Sprintf("%v", i))
		group := builder.Generate(random, time.Duration(i))
		group.Metrics.Update()
		groups = append(groups, group)
	}
	return groups
}
