#
# Autogenerated by Thrift Compiler (0.9.3)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py:tornado,new_style,dynamic,slots,utf8strings
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException
import logging
from ttypes import *
from thrift.Thrift import TProcessor
from thrift.protocol.TBase import TBase, TExceptionBase, TTransport

from tornado import gen
from tornado import concurrent
from thrift.transport import TTransport

class Iface(object):
  def getName(self):
    """
    Get the module name
    """
    pass

  def applyGoalStates(self, states):
    """
    Apply the list of goal states for this module

    Parameters:
     - states
    """
    pass

  def getActualStates(self, instanceIds):
    """
    Get the list of actual states for the service instances. Return the
    states for all instances if the list of instanceIds is empty.

    Parameters:
     - instanceIds
    """
    pass


class Client(Iface):
  def __init__(self, transport, iprot_factory, oprot_factory=None):
    self._transport = transport
    self._iprot_factory = iprot_factory
    self._oprot_factory = (oprot_factory if oprot_factory is not None
                           else iprot_factory)
    self._seqid = 0
    self._reqs = {}
    self._transport.io_loop.spawn_callback(self._start_receiving)

  @gen.engine
  def _start_receiving(self):
    while True:
      try:
        frame = yield self._transport.readFrame()
      except TTransport.TTransportException as e:
        for future in self._reqs.itervalues():
          future.set_exception(e)
        self._reqs = {}
        return
      tr = TTransport.TMemoryBuffer(frame)
      iprot = self._iprot_factory.getProtocol(tr)
      (fname, mtype, rseqid) = iprot.readMessageBegin()
      future = self._reqs.pop(rseqid, None)
      if not future:
        # future has already been discarded
        continue
      method = getattr(self, 'recv_' + fname)
      try:
        result = method(iprot, mtype, rseqid)
      except Exception as e:
        future.set_exception(e)
      else:
        future.set_result(result)

  def getName(self):
    """
    Get the module name
    """
    self._seqid += 1
    future = self._reqs[self._seqid] = concurrent.Future()
    self.send_getName()
    return future

  def send_getName(self):
    oprot = self._oprot_factory.getProtocol(self._transport)
    oprot.writeMessageBegin('getName', TMessageType.CALL, self._seqid)
    args = getName_args()
    args.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def recv_getName(self, iprot, mtype, rseqid):
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = getName_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getName failed: unknown result")

  def applyGoalStates(self, states):
    """
    Apply the list of goal states for this module

    Parameters:
     - states
    """
    self._seqid += 1
    future = self._reqs[self._seqid] = concurrent.Future()
    self.send_applyGoalStates(states)
    return future

  def send_applyGoalStates(self, states):
    oprot = self._oprot_factory.getProtocol(self._transport)
    oprot.writeMessageBegin('applyGoalStates', TMessageType.CALL, self._seqid)
    args = applyGoalStates_args()
    args.states = states
    args.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def recv_applyGoalStates(self, iprot, mtype, rseqid):
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = applyGoalStates_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.invalid is not None:
      raise result.invalid
    return

  def getActualStates(self, instanceIds):
    """
    Get the list of actual states for the service instances. Return the
    states for all instances if the list of instanceIds is empty.

    Parameters:
     - instanceIds
    """
    self._seqid += 1
    future = self._reqs[self._seqid] = concurrent.Future()
    self.send_getActualStates(instanceIds)
    return future

  def send_getActualStates(self, instanceIds):
    oprot = self._oprot_factory.getProtocol(self._transport)
    oprot.writeMessageBegin('getActualStates', TMessageType.CALL, self._seqid)
    args = getActualStates_args()
    args.instanceIds = instanceIds
    args.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def recv_getActualStates(self, iprot, mtype, rseqid):
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = getActualStates_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getActualStates failed: unknown result")


class Processor(Iface, TProcessor):
  def __init__(self, handler):
    self._handler = handler
    self._processMap = {}
    self._processMap["getName"] = Processor.process_getName
    self._processMap["applyGoalStates"] = Processor.process_applyGoalStates
    self._processMap["getActualStates"] = Processor.process_getActualStates

  def process(self, iprot, oprot):
    (name, type, seqid) = iprot.readMessageBegin()
    if name not in self._processMap:
      iprot.skip(TType.STRUCT)
      iprot.readMessageEnd()
      x = TApplicationException(TApplicationException.UNKNOWN_METHOD, 'Unknown function %s' % (name))
      oprot.writeMessageBegin(name, TMessageType.EXCEPTION, seqid)
      x.write(oprot)
      oprot.writeMessageEnd()
      oprot.trans.flush()
      return
    else:
      return self._processMap[name](self, seqid, iprot, oprot)

  @gen.coroutine
  def process_getName(self, seqid, iprot, oprot):
    args = getName_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = getName_result()
    result.success = yield gen.maybe_future(self._handler.getName())
    oprot.writeMessageBegin("getName", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  @gen.coroutine
  def process_applyGoalStates(self, seqid, iprot, oprot):
    args = applyGoalStates_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = applyGoalStates_result()
    try:
      yield gen.maybe_future(self._handler.applyGoalStates(args.states))
    except InvalidGoalState as invalid:
      result.invalid = invalid
    oprot.writeMessageBegin("applyGoalStates", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  @gen.coroutine
  def process_getActualStates(self, seqid, iprot, oprot):
    args = getActualStates_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = getActualStates_result()
    result.success = yield gen.maybe_future(self._handler.getActualStates(args.instanceIds))
    oprot.writeMessageBegin("getActualStates", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()


# HELPER FUNCTIONS AND STRUCTURES

class getName_args(TBase):

  __slots__ = [ 
   ]

  thrift_spec = (
  )

  def __hash__(self):
    value = 17
    return value


class getName_result(TBase):
  """
  Attributes:
   - success
  """

  __slots__ = [ 
    'success',
   ]

  thrift_spec = (
    (0, TType.STRING, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value


class applyGoalStates_args(TBase):
  """
  Attributes:
   - states
  """

  __slots__ = [ 
    'states',
   ]

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'states', (TType.STRUCT,(GoalState, GoalState.thrift_spec)), None, ), # 1
  )

  def __init__(self, states=None,):
    self.states = states

  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.states)
    return value


class applyGoalStates_result(TBase):
  """
  Attributes:
   - invalid
  """

  __slots__ = [ 
    'invalid',
   ]

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'invalid', (InvalidGoalState, InvalidGoalState.thrift_spec), None, ), # 1
  )

  def __init__(self, invalid=None,):
    self.invalid = invalid

  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.invalid)
    return value


class getActualStates_args(TBase):
  """
  Attributes:
   - instanceIds
  """

  __slots__ = [ 
    'instanceIds',
   ]

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'instanceIds', (TType.STRING,None), None, ), # 1
  )

  def __init__(self, instanceIds=None,):
    self.instanceIds = instanceIds

  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.instanceIds)
    return value


class getActualStates_result(TBase):
  """
  Attributes:
   - success
  """

  __slots__ = [ 
    'success',
   ]

  thrift_spec = (
    (0, TType.LIST, 'success', (TType.STRUCT,(ActualState, ActualState.thrift_spec)), None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

