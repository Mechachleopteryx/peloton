// Code generated by MockGen. DO NOT EDIT.
// Source: code.uber.internal/infra/peloton/.gen/peloton/private/resmgrsvc (interfaces: ResourceManagerServiceYARPCClient)

package mocks

import (
	context "context"
	reflect "reflect"

	resmgrsvc "code.uber.internal/infra/peloton/.gen/peloton/private/resmgrsvc"
	gomock "github.com/golang/mock/gomock"
	yarpc "go.uber.org/yarpc"
)

// MockResourceManagerServiceYARPCClient is a mock of ResourceManagerServiceYARPCClient interface
type MockResourceManagerServiceYARPCClient struct {
	ctrl     *gomock.Controller
	recorder *MockResourceManagerServiceYARPCClientMockRecorder
}

// MockResourceManagerServiceYARPCClientMockRecorder is the mock recorder for MockResourceManagerServiceYARPCClient
type MockResourceManagerServiceYARPCClientMockRecorder struct {
	mock *MockResourceManagerServiceYARPCClient
}

// NewMockResourceManagerServiceYARPCClient creates a new mock instance
func NewMockResourceManagerServiceYARPCClient(ctrl *gomock.Controller) *MockResourceManagerServiceYARPCClient {
	mock := &MockResourceManagerServiceYARPCClient{ctrl: ctrl}
	mock.recorder = &MockResourceManagerServiceYARPCClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockResourceManagerServiceYARPCClient) EXPECT() *MockResourceManagerServiceYARPCClientMockRecorder {
	return _m.recorder
}

// DequeueGangs mocks base method
func (_m *MockResourceManagerServiceYARPCClient) DequeueGangs(_param0 context.Context, _param1 *resmgrsvc.DequeueGangsRequest, _param2 ...yarpc.CallOption) (*resmgrsvc.DequeueGangsResponse, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "DequeueGangs", _s...)
	ret0, _ := ret[0].(*resmgrsvc.DequeueGangsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DequeueGangs indicates an expected call of DequeueGangs
func (_mr *MockResourceManagerServiceYARPCClientMockRecorder) DequeueGangs(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "DequeueGangs", reflect.TypeOf((*MockResourceManagerServiceYARPCClient)(nil).DequeueGangs), _s...)
}

// EnqueueGangs mocks base method
func (_m *MockResourceManagerServiceYARPCClient) EnqueueGangs(_param0 context.Context, _param1 *resmgrsvc.EnqueueGangsRequest, _param2 ...yarpc.CallOption) (*resmgrsvc.EnqueueGangsResponse, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "EnqueueGangs", _s...)
	ret0, _ := ret[0].(*resmgrsvc.EnqueueGangsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EnqueueGangs indicates an expected call of EnqueueGangs
func (_mr *MockResourceManagerServiceYARPCClientMockRecorder) EnqueueGangs(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "EnqueueGangs", reflect.TypeOf((*MockResourceManagerServiceYARPCClient)(nil).EnqueueGangs), _s...)
}

// GetActiveTasks mocks base method
func (_m *MockResourceManagerServiceYARPCClient) GetActiveTasks(_param0 context.Context, _param1 *resmgrsvc.GetActiveTasksRequest, _param2 ...yarpc.CallOption) (*resmgrsvc.GetActiveTasksResponse, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "GetActiveTasks", _s...)
	ret0, _ := ret[0].(*resmgrsvc.GetActiveTasksResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetActiveTasks indicates an expected call of GetActiveTasks
func (_mr *MockResourceManagerServiceYARPCClientMockRecorder) GetActiveTasks(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "GetActiveTasks", reflect.TypeOf((*MockResourceManagerServiceYARPCClient)(nil).GetActiveTasks), _s...)
}

// GetPlacements mocks base method
func (_m *MockResourceManagerServiceYARPCClient) GetPlacements(_param0 context.Context, _param1 *resmgrsvc.GetPlacementsRequest, _param2 ...yarpc.CallOption) (*resmgrsvc.GetPlacementsResponse, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "GetPlacements", _s...)
	ret0, _ := ret[0].(*resmgrsvc.GetPlacementsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPlacements indicates an expected call of GetPlacements
func (_mr *MockResourceManagerServiceYARPCClientMockRecorder) GetPlacements(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "GetPlacements", reflect.TypeOf((*MockResourceManagerServiceYARPCClient)(nil).GetPlacements), _s...)
}

// GetPreemptibleTasks mocks base method
func (_m *MockResourceManagerServiceYARPCClient) GetPreemptibleTasks(_param0 context.Context, _param1 *resmgrsvc.GetPreemptibleTasksRequest, _param2 ...yarpc.CallOption) (*resmgrsvc.GetPreemptibleTasksResponse, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "GetPreemptibleTasks", _s...)
	ret0, _ := ret[0].(*resmgrsvc.GetPreemptibleTasksResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPreemptibleTasks indicates an expected call of GetPreemptibleTasks
func (_mr *MockResourceManagerServiceYARPCClientMockRecorder) GetPreemptibleTasks(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "GetPreemptibleTasks", reflect.TypeOf((*MockResourceManagerServiceYARPCClient)(nil).GetPreemptibleTasks), _s...)
}

// GetTasksByHosts mocks base method
func (_m *MockResourceManagerServiceYARPCClient) GetTasksByHosts(_param0 context.Context, _param1 *resmgrsvc.GetTasksByHostsRequest, _param2 ...yarpc.CallOption) (*resmgrsvc.GetTasksByHostsResponse, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "GetTasksByHosts", _s...)
	ret0, _ := ret[0].(*resmgrsvc.GetTasksByHostsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTasksByHosts indicates an expected call of GetTasksByHosts
func (_mr *MockResourceManagerServiceYARPCClientMockRecorder) GetTasksByHosts(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "GetTasksByHosts", reflect.TypeOf((*MockResourceManagerServiceYARPCClient)(nil).GetTasksByHosts), _s...)
}

// KillTasks mocks base method
func (_m *MockResourceManagerServiceYARPCClient) KillTasks(_param0 context.Context, _param1 *resmgrsvc.KillTasksRequest, _param2 ...yarpc.CallOption) (*resmgrsvc.KillTasksResponse, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "KillTasks", _s...)
	ret0, _ := ret[0].(*resmgrsvc.KillTasksResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// KillTasks indicates an expected call of KillTasks
func (_mr *MockResourceManagerServiceYARPCClientMockRecorder) KillTasks(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "KillTasks", reflect.TypeOf((*MockResourceManagerServiceYARPCClient)(nil).KillTasks), _s...)
}

// NotifyTaskUpdates mocks base method
func (_m *MockResourceManagerServiceYARPCClient) NotifyTaskUpdates(_param0 context.Context, _param1 *resmgrsvc.NotifyTaskUpdatesRequest, _param2 ...yarpc.CallOption) (*resmgrsvc.NotifyTaskUpdatesResponse, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "NotifyTaskUpdates", _s...)
	ret0, _ := ret[0].(*resmgrsvc.NotifyTaskUpdatesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NotifyTaskUpdates indicates an expected call of NotifyTaskUpdates
func (_mr *MockResourceManagerServiceYARPCClientMockRecorder) NotifyTaskUpdates(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "NotifyTaskUpdates", reflect.TypeOf((*MockResourceManagerServiceYARPCClient)(nil).NotifyTaskUpdates), _s...)
}

// SetPlacements mocks base method
func (_m *MockResourceManagerServiceYARPCClient) SetPlacements(_param0 context.Context, _param1 *resmgrsvc.SetPlacementsRequest, _param2 ...yarpc.CallOption) (*resmgrsvc.SetPlacementsResponse, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "SetPlacements", _s...)
	ret0, _ := ret[0].(*resmgrsvc.SetPlacementsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetPlacements indicates an expected call of SetPlacements
func (_mr *MockResourceManagerServiceYARPCClientMockRecorder) SetPlacements(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "SetPlacements", reflect.TypeOf((*MockResourceManagerServiceYARPCClient)(nil).SetPlacements), _s...)
}
