// Code generated by MockGen. DO NOT EDIT.
// Source: code.uber.internal/infra/peloton/.gen/peloton/api/task (interfaces: TaskManagerYARPCClient)

package mocks

import (
	context "context"
	reflect "reflect"

	task "code.uber.internal/infra/peloton/.gen/peloton/api/task"
	gomock "github.com/golang/mock/gomock"
	yarpc "go.uber.org/yarpc"
)

// MockTaskManagerYARPCClient is a mock of TaskManagerYARPCClient interface
type MockTaskManagerYARPCClient struct {
	ctrl     *gomock.Controller
	recorder *MockTaskManagerYARPCClientMockRecorder
}

// MockTaskManagerYARPCClientMockRecorder is the mock recorder for MockTaskManagerYARPCClient
type MockTaskManagerYARPCClientMockRecorder struct {
	mock *MockTaskManagerYARPCClient
}

// NewMockTaskManagerYARPCClient creates a new mock instance
func NewMockTaskManagerYARPCClient(ctrl *gomock.Controller) *MockTaskManagerYARPCClient {
	mock := &MockTaskManagerYARPCClient{ctrl: ctrl}
	mock.recorder = &MockTaskManagerYARPCClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockTaskManagerYARPCClient) EXPECT() *MockTaskManagerYARPCClientMockRecorder {
	return _m.recorder
}

// BrowseSandbox mocks base method
func (_m *MockTaskManagerYARPCClient) BrowseSandbox(_param0 context.Context, _param1 *task.BrowseSandboxRequest, _param2 ...yarpc.CallOption) (*task.BrowseSandboxResponse, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "BrowseSandbox", _s...)
	ret0, _ := ret[0].(*task.BrowseSandboxResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BrowseSandbox indicates an expected call of BrowseSandbox
func (_mr *MockTaskManagerYARPCClientMockRecorder) BrowseSandbox(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "BrowseSandbox", reflect.TypeOf((*MockTaskManagerYARPCClient)(nil).BrowseSandbox), _s...)
}

// Get mocks base method
func (_m *MockTaskManagerYARPCClient) Get(_param0 context.Context, _param1 *task.GetRequest, _param2 ...yarpc.CallOption) (*task.GetResponse, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "Get", _s...)
	ret0, _ := ret[0].(*task.GetResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (_mr *MockTaskManagerYARPCClientMockRecorder) Get(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Get", reflect.TypeOf((*MockTaskManagerYARPCClient)(nil).Get), _s...)
}

// List mocks base method
func (_m *MockTaskManagerYARPCClient) List(_param0 context.Context, _param1 *task.ListRequest, _param2 ...yarpc.CallOption) (*task.ListResponse, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "List", _s...)
	ret0, _ := ret[0].(*task.ListResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (_mr *MockTaskManagerYARPCClientMockRecorder) List(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "List", reflect.TypeOf((*MockTaskManagerYARPCClient)(nil).List), _s...)
}

// Query mocks base method
func (_m *MockTaskManagerYARPCClient) Query(_param0 context.Context, _param1 *task.QueryRequest, _param2 ...yarpc.CallOption) (*task.QueryResponse, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "Query", _s...)
	ret0, _ := ret[0].(*task.QueryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Query indicates an expected call of Query
func (_mr *MockTaskManagerYARPCClientMockRecorder) Query(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Query", reflect.TypeOf((*MockTaskManagerYARPCClient)(nil).Query), _s...)
}

// Restart mocks base method
func (_m *MockTaskManagerYARPCClient) Restart(_param0 context.Context, _param1 *task.RestartRequest, _param2 ...yarpc.CallOption) (*task.RestartResponse, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "Restart", _s...)
	ret0, _ := ret[0].(*task.RestartResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Restart indicates an expected call of Restart
func (_mr *MockTaskManagerYARPCClientMockRecorder) Restart(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Restart", reflect.TypeOf((*MockTaskManagerYARPCClient)(nil).Restart), _s...)
}

// Start mocks base method
func (_m *MockTaskManagerYARPCClient) Start(_param0 context.Context, _param1 *task.StartRequest, _param2 ...yarpc.CallOption) (*task.StartResponse, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "Start", _s...)
	ret0, _ := ret[0].(*task.StartResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Start indicates an expected call of Start
func (_mr *MockTaskManagerYARPCClientMockRecorder) Start(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Start", reflect.TypeOf((*MockTaskManagerYARPCClient)(nil).Start), _s...)
}

// Stop mocks base method
func (_m *MockTaskManagerYARPCClient) Stop(_param0 context.Context, _param1 *task.StopRequest, _param2 ...yarpc.CallOption) (*task.StopResponse, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "Stop", _s...)
	ret0, _ := ret[0].(*task.StopResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Stop indicates an expected call of Stop
func (_mr *MockTaskManagerYARPCClientMockRecorder) Stop(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Stop", reflect.TypeOf((*MockTaskManagerYARPCClient)(nil).Stop), _s...)
}
