// Code generated by MockGen. DO NOT EDIT.
// Source: code.uber.internal/infra/peloton/.gen/peloton/api/job (interfaces: JobManagerYARPCClient)

package mocks

import (
	context "context"
	reflect "reflect"

	job "code.uber.internal/infra/peloton/.gen/peloton/api/job"
	gomock "github.com/golang/mock/gomock"
	yarpc "go.uber.org/yarpc"
)

// MockJobManagerYARPCClient is a mock of JobManagerYARPCClient interface
type MockJobManagerYARPCClient struct {
	ctrl     *gomock.Controller
	recorder *MockJobManagerYARPCClientMockRecorder
}

// MockJobManagerYARPCClientMockRecorder is the mock recorder for MockJobManagerYARPCClient
type MockJobManagerYARPCClientMockRecorder struct {
	mock *MockJobManagerYARPCClient
}

// NewMockJobManagerYARPCClient creates a new mock instance
func NewMockJobManagerYARPCClient(ctrl *gomock.Controller) *MockJobManagerYARPCClient {
	mock := &MockJobManagerYARPCClient{ctrl: ctrl}
	mock.recorder = &MockJobManagerYARPCClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockJobManagerYARPCClient) EXPECT() *MockJobManagerYARPCClientMockRecorder {
	return _m.recorder
}

// Create mocks base method
func (_m *MockJobManagerYARPCClient) Create(_param0 context.Context, _param1 *job.CreateRequest, _param2 ...yarpc.CallOption) (*job.CreateResponse, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "Create", _s...)
	ret0, _ := ret[0].(*job.CreateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (_mr *MockJobManagerYARPCClientMockRecorder) Create(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Create", reflect.TypeOf((*MockJobManagerYARPCClient)(nil).Create), _s...)
}

// Delete mocks base method
func (_m *MockJobManagerYARPCClient) Delete(_param0 context.Context, _param1 *job.DeleteRequest, _param2 ...yarpc.CallOption) (*job.DeleteResponse, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "Delete", _s...)
	ret0, _ := ret[0].(*job.DeleteResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete
func (_mr *MockJobManagerYARPCClientMockRecorder) Delete(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Delete", reflect.TypeOf((*MockJobManagerYARPCClient)(nil).Delete), _s...)
}

// Get mocks base method
func (_m *MockJobManagerYARPCClient) Get(_param0 context.Context, _param1 *job.GetRequest, _param2 ...yarpc.CallOption) (*job.GetResponse, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "Get", _s...)
	ret0, _ := ret[0].(*job.GetResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (_mr *MockJobManagerYARPCClientMockRecorder) Get(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Get", reflect.TypeOf((*MockJobManagerYARPCClient)(nil).Get), _s...)
}

// Query mocks base method
func (_m *MockJobManagerYARPCClient) Query(_param0 context.Context, _param1 *job.QueryRequest, _param2 ...yarpc.CallOption) (*job.QueryResponse, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "Query", _s...)
	ret0, _ := ret[0].(*job.QueryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Query indicates an expected call of Query
func (_mr *MockJobManagerYARPCClientMockRecorder) Query(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Query", reflect.TypeOf((*MockJobManagerYARPCClient)(nil).Query), _s...)
}

// Update mocks base method
func (_m *MockJobManagerYARPCClient) Update(_param0 context.Context, _param1 *job.UpdateRequest, _param2 ...yarpc.CallOption) (*job.UpdateResponse, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "Update", _s...)
	ret0, _ := ret[0].(*job.UpdateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update
func (_mr *MockJobManagerYARPCClientMockRecorder) Update(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Update", reflect.TypeOf((*MockJobManagerYARPCClient)(nil).Update), _s...)
}
