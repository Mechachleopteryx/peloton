// Code generated by MockGen. DO NOT EDIT.
// Source: code.uber.internal/infra/peloton/jobmgr/task/event (interfaces: Listener,StatusProcessor)

package mocks

import (
	context "context"
	reflect "reflect"

	eventstream "code.uber.internal/infra/peloton/.gen/peloton/private/eventstream"
	gomock "github.com/golang/mock/gomock"
)

// MockListener is a mock of Listener interface
type MockListener struct {
	ctrl     *gomock.Controller
	recorder *MockListenerMockRecorder
}

// MockListenerMockRecorder is the mock recorder for MockListener
type MockListenerMockRecorder struct {
	mock *MockListener
}

// NewMockListener creates a new mock instance
func NewMockListener(ctrl *gomock.Controller) *MockListener {
	mock := &MockListener{ctrl: ctrl}
	mock.recorder = &MockListenerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockListener) EXPECT() *MockListenerMockRecorder {
	return _m.recorder
}

// GetEventProgress mocks base method
func (_m *MockListener) GetEventProgress() uint64 {
	ret := _m.ctrl.Call(_m, "GetEventProgress")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// GetEventProgress indicates an expected call of GetEventProgress
func (_mr *MockListenerMockRecorder) GetEventProgress() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "GetEventProgress", reflect.TypeOf((*MockListener)(nil).GetEventProgress))
}

// OnEvent mocks base method
func (_m *MockListener) OnEvent(_param0 *eventstream.Event) {
	_m.ctrl.Call(_m, "OnEvent", _param0)
}

// OnEvent indicates an expected call of OnEvent
func (_mr *MockListenerMockRecorder) OnEvent(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "OnEvent", reflect.TypeOf((*MockListener)(nil).OnEvent), arg0)
}

// OnEvents mocks base method
func (_m *MockListener) OnEvents(_param0 []*eventstream.Event) {
	_m.ctrl.Call(_m, "OnEvents", _param0)
}

// OnEvents indicates an expected call of OnEvents
func (_mr *MockListenerMockRecorder) OnEvents(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "OnEvents", reflect.TypeOf((*MockListener)(nil).OnEvents), arg0)
}

// Start mocks base method
func (_m *MockListener) Start() {
	_m.ctrl.Call(_m, "Start")
}

// Start indicates an expected call of Start
func (_mr *MockListenerMockRecorder) Start() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Start", reflect.TypeOf((*MockListener)(nil).Start))
}

// Stop mocks base method
func (_m *MockListener) Stop() {
	_m.ctrl.Call(_m, "Stop")
}

// Stop indicates an expected call of Stop
func (_mr *MockListenerMockRecorder) Stop() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Stop", reflect.TypeOf((*MockListener)(nil).Stop))
}

// MockStatusProcessor is a mock of StatusProcessor interface
type MockStatusProcessor struct {
	ctrl     *gomock.Controller
	recorder *MockStatusProcessorMockRecorder
}

// MockStatusProcessorMockRecorder is the mock recorder for MockStatusProcessor
type MockStatusProcessorMockRecorder struct {
	mock *MockStatusProcessor
}

// NewMockStatusProcessor creates a new mock instance
func NewMockStatusProcessor(ctrl *gomock.Controller) *MockStatusProcessor {
	mock := &MockStatusProcessor{ctrl: ctrl}
	mock.recorder = &MockStatusProcessorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockStatusProcessor) EXPECT() *MockStatusProcessorMockRecorder {
	return _m.recorder
}

// ProcessListeners mocks base method
func (_m *MockStatusProcessor) ProcessListeners(_param0 *eventstream.Event) {
	_m.ctrl.Call(_m, "ProcessListeners", _param0)
}

// ProcessListeners indicates an expected call of ProcessListeners
func (_mr *MockStatusProcessorMockRecorder) ProcessListeners(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "ProcessListeners", reflect.TypeOf((*MockStatusProcessor)(nil).ProcessListeners), arg0)
}

// ProcessStatusUpdate mocks base method
func (_m *MockStatusProcessor) ProcessStatusUpdate(_param0 context.Context, _param1 *eventstream.Event) error {
	ret := _m.ctrl.Call(_m, "ProcessStatusUpdate", _param0, _param1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ProcessStatusUpdate indicates an expected call of ProcessStatusUpdate
func (_mr *MockStatusProcessorMockRecorder) ProcessStatusUpdate(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "ProcessStatusUpdate", reflect.TypeOf((*MockStatusProcessor)(nil).ProcessStatusUpdate), arg0, arg1)
}
