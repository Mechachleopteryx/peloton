// Code generated by MockGen. DO NOT EDIT.
// Source: code.uber.internal/infra/peloton/jobmgr/task/launcher (interfaces: Launcher)

package mocks

import (
	context "context"
	reflect "reflect"

	task "code.uber.internal/infra/peloton/.gen/peloton/api/task"
	resmgr "code.uber.internal/infra/peloton/.gen/peloton/private/resmgr"
	resmgrsvc "code.uber.internal/infra/peloton/.gen/peloton/private/resmgrsvc"
	gomock "github.com/golang/mock/gomock"
)

// MockLauncher is a mock of Launcher interface
type MockLauncher struct {
	ctrl     *gomock.Controller
	recorder *MockLauncherMockRecorder
}

// MockLauncherMockRecorder is the mock recorder for MockLauncher
type MockLauncherMockRecorder struct {
	mock *MockLauncher
}

// NewMockLauncher creates a new mock instance
func NewMockLauncher(ctrl *gomock.Controller) *MockLauncher {
	mock := &MockLauncher{ctrl: ctrl}
	mock.recorder = &MockLauncherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockLauncher) EXPECT() *MockLauncherMockRecorder {
	return _m.recorder
}

// LaunchTaskWithReservedResource mocks base method
func (_m *MockLauncher) LaunchTaskWithReservedResource(_param0 context.Context, _param1 *task.TaskInfo) error {
	ret := _m.ctrl.Call(_m, "LaunchTaskWithReservedResource", _param0, _param1)
	ret0, _ := ret[0].(error)
	return ret0
}

// LaunchTaskWithReservedResource indicates an expected call of LaunchTaskWithReservedResource
func (_mr *MockLauncherMockRecorder) LaunchTaskWithReservedResource(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "LaunchTaskWithReservedResource", reflect.TypeOf((*MockLauncher)(nil).LaunchTaskWithReservedResource), arg0, arg1)
}

// ProcessPlacements mocks base method
func (_m *MockLauncher) ProcessPlacements(_param0 context.Context, _param1 resmgrsvc.ResourceManagerServiceYARPCClient, _param2 []*resmgr.Placement) error {
	ret := _m.ctrl.Call(_m, "ProcessPlacements", _param0, _param1, _param2)
	ret0, _ := ret[0].(error)
	return ret0
}

// ProcessPlacements indicates an expected call of ProcessPlacements
func (_mr *MockLauncherMockRecorder) ProcessPlacements(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "ProcessPlacements", reflect.TypeOf((*MockLauncher)(nil).ProcessPlacements), arg0, arg1, arg2)
}
