// Code generated by MockGen. DO NOT EDIT.
// Source: code.uber.internal/infra/peloton/jobmgr/job (interfaces: RuntimeUpdater)

package mocks

import (
	context "context"
	reflect "reflect"

	peloton "code.uber.internal/infra/peloton/.gen/peloton/api/peloton"
	eventstream "code.uber.internal/infra/peloton/.gen/peloton/private/eventstream"
	gomock "github.com/golang/mock/gomock"
)

// MockRuntimeUpdater is a mock of RuntimeUpdater interface
type MockRuntimeUpdater struct {
	ctrl     *gomock.Controller
	recorder *MockRuntimeUpdaterMockRecorder
}

// MockRuntimeUpdaterMockRecorder is the mock recorder for MockRuntimeUpdater
type MockRuntimeUpdaterMockRecorder struct {
	mock *MockRuntimeUpdater
}

// NewMockRuntimeUpdater creates a new mock instance
func NewMockRuntimeUpdater(ctrl *gomock.Controller) *MockRuntimeUpdater {
	mock := &MockRuntimeUpdater{ctrl: ctrl}
	mock.recorder = &MockRuntimeUpdaterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockRuntimeUpdater) EXPECT() *MockRuntimeUpdaterMockRecorder {
	return _m.recorder
}

// GetEventProgress mocks base method
func (_m *MockRuntimeUpdater) GetEventProgress() uint64 {
	ret := _m.ctrl.Call(_m, "GetEventProgress")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// GetEventProgress indicates an expected call of GetEventProgress
func (_mr *MockRuntimeUpdaterMockRecorder) GetEventProgress() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "GetEventProgress", reflect.TypeOf((*MockRuntimeUpdater)(nil).GetEventProgress))
}

// OnEvent mocks base method
func (_m *MockRuntimeUpdater) OnEvent(_param0 *eventstream.Event) {
	_m.ctrl.Call(_m, "OnEvent", _param0)
}

// OnEvent indicates an expected call of OnEvent
func (_mr *MockRuntimeUpdaterMockRecorder) OnEvent(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "OnEvent", reflect.TypeOf((*MockRuntimeUpdater)(nil).OnEvent), arg0)
}

// OnEvents mocks base method
func (_m *MockRuntimeUpdater) OnEvents(_param0 []*eventstream.Event) {
	_m.ctrl.Call(_m, "OnEvents", _param0)
}

// OnEvents indicates an expected call of OnEvents
func (_mr *MockRuntimeUpdaterMockRecorder) OnEvents(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "OnEvents", reflect.TypeOf((*MockRuntimeUpdater)(nil).OnEvents), arg0)
}

// Start mocks base method
func (_m *MockRuntimeUpdater) Start() {
	_m.ctrl.Call(_m, "Start")
}

// Start indicates an expected call of Start
func (_mr *MockRuntimeUpdaterMockRecorder) Start() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Start", reflect.TypeOf((*MockRuntimeUpdater)(nil).Start))
}

// Stop mocks base method
func (_m *MockRuntimeUpdater) Stop() {
	_m.ctrl.Call(_m, "Stop")
}

// Stop indicates an expected call of Stop
func (_mr *MockRuntimeUpdaterMockRecorder) Stop() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Stop", reflect.TypeOf((*MockRuntimeUpdater)(nil).Stop))
}

// UpdateJob mocks base method
func (_m *MockRuntimeUpdater) UpdateJob(_param0 context.Context, _param1 *peloton.JobID) error {
	ret := _m.ctrl.Call(_m, "UpdateJob", _param0, _param1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateJob indicates an expected call of UpdateJob
func (_mr *MockRuntimeUpdaterMockRecorder) UpdateJob(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "UpdateJob", reflect.TypeOf((*MockRuntimeUpdater)(nil).UpdateJob), arg0, arg1)
}
