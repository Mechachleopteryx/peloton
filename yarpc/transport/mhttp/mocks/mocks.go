// Code generated by MockGen. DO NOT EDIT.
// Source: code.uber.internal/infra/peloton/yarpc/transport/mhttp (interfaces: Inbound)

package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	transport "go.uber.org/yarpc/api/transport"
)

// MockInbound is a mock of Inbound interface
type MockInbound struct {
	ctrl     *gomock.Controller
	recorder *MockInboundMockRecorder
}

// MockInboundMockRecorder is the mock recorder for MockInbound
type MockInboundMockRecorder struct {
	mock *MockInbound
}

// NewMockInbound creates a new mock instance
func NewMockInbound(ctrl *gomock.Controller) *MockInbound {
	mock := &MockInbound{ctrl: ctrl}
	mock.recorder = &MockInboundMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockInbound) EXPECT() *MockInboundMockRecorder {
	return _m.recorder
}

// IsRunning mocks base method
func (_m *MockInbound) IsRunning() bool {
	ret := _m.ctrl.Call(_m, "IsRunning")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsRunning indicates an expected call of IsRunning
func (_mr *MockInboundMockRecorder) IsRunning() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "IsRunning", reflect.TypeOf((*MockInbound)(nil).IsRunning))
}

// SetRouter mocks base method
func (_m *MockInbound) SetRouter(_param0 transport.Router) {
	_m.ctrl.Call(_m, "SetRouter", _param0)
}

// SetRouter indicates an expected call of SetRouter
func (_mr *MockInboundMockRecorder) SetRouter(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "SetRouter", reflect.TypeOf((*MockInbound)(nil).SetRouter), arg0)
}

// Start mocks base method
func (_m *MockInbound) Start() error {
	ret := _m.ctrl.Call(_m, "Start")
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start
func (_mr *MockInboundMockRecorder) Start() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Start", reflect.TypeOf((*MockInbound)(nil).Start))
}

// StartMesosLoop mocks base method
func (_m *MockInbound) StartMesosLoop(_param0 context.Context, _param1 string) (chan error, error) {
	ret := _m.ctrl.Call(_m, "StartMesosLoop", _param0, _param1)
	ret0, _ := ret[0].(chan error)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartMesosLoop indicates an expected call of StartMesosLoop
func (_mr *MockInboundMockRecorder) StartMesosLoop(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "StartMesosLoop", reflect.TypeOf((*MockInbound)(nil).StartMesosLoop), arg0, arg1)
}

// Stop mocks base method
func (_m *MockInbound) Stop() error {
	ret := _m.ctrl.Call(_m, "Stop")
	ret0, _ := ret[0].(error)
	return ret0
}

// Stop indicates an expected call of Stop
func (_mr *MockInboundMockRecorder) Stop() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Stop", reflect.TypeOf((*MockInbound)(nil).Stop))
}

// Transports mocks base method
func (_m *MockInbound) Transports() []transport.Transport {
	ret := _m.ctrl.Call(_m, "Transports")
	ret0, _ := ret[0].([]transport.Transport)
	return ret0
}

// Transports indicates an expected call of Transports
func (_mr *MockInboundMockRecorder) Transports() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Transports", reflect.TypeOf((*MockInbound)(nil).Transports))
}
