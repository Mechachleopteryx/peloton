// Automatically generated by MockGen. DO NOT EDIT!
// Source: vendor/go.uber.org/yarpc/encoding/json/outbound.go

package mocks

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	yarpc "go.uber.org/yarpc"
	transport "go.uber.org/yarpc/transport"
)

// Mock of Client interface
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *_MockClientRecorder
}

// Recorder for MockClient (not exported)
type _MockClientRecorder struct {
	mock *MockClient
}

func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &_MockClientRecorder{mock}
	return mock
}

func (_m *MockClient) EXPECT() *_MockClientRecorder {
	return _m.recorder
}

func (_m *MockClient) Call(ctx context.Context, reqMeta yarpc.CallReqMeta, reqBody interface{}, resBodyOut interface{}) (yarpc.CallResMeta, error) {
	ret := _m.ctrl.Call(_m, "Call", ctx, reqMeta, reqBody, resBodyOut)
	ret0, _ := ret[0].(yarpc.CallResMeta)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockClientRecorder) Call(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Call", arg0, arg1, arg2, arg3)
}

func (_m *MockClient) CallOneway(ctx context.Context, reqMeta yarpc.CallReqMeta, reqBody interface{}) (transport.Ack, error) {
	ret := _m.ctrl.Call(_m, "CallOneway", ctx, reqMeta, reqBody)
	ret0, _ := ret[0].(transport.Ack)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockClientRecorder) CallOneway(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CallOneway", arg0, arg1, arg2)
}
